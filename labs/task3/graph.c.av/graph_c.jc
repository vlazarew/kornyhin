
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag __anonstruct_Vertex_2 = {
  padding padding_1: 32; 
  int32 existent: 32;
}

type __anonstruct_Vertex_2 = [__anonstruct_Vertex_2]

tag __anonstruct_Edge_3 = {
  int32 from: 32; 
  int32 to: 32; 
  int32 existent_0: 32;
}

type __anonstruct_Edge_3 = [__anonstruct_Edge_3]

tag __anonstruct_Graph_4 = {
  __anonstruct_Vertex_2[..] vertices: 64; 
  int32 vsize: 32; 
  padding padding_2: 32; 
  __anonstruct_Edge_3[..] edges: 64; 
  int32 ecnt: 32; 
  int32 esize: 32;
}

type __anonstruct_Graph_4 = [__anonstruct_Graph_4]

predicate is_vertex{L}(__anonstruct_Graph_4[..] g, integer v) =
\at(((0 <= v) && (v < (g.vsize :> integer))),L)

predicate edge_valid{L}(__anonstruct_Graph_4[..] g_0, integer k_1) =
\at(((! ((g_0.edges + k_1).existent_0 == 0)) ==>
      (((is_vertex{L}(g_0, ((g_0.edges + k_1).from :> integer)) &&
          is_vertex{L}(g_0, ((g_0.edges + k_1).to :> integer))) &&
         (! ((g_0.vertices + ((g_0.edges + k_1).from :> integer)).existent ==
              0))) &&
        (! ((g_0.vertices + ((g_0.edges + k_1).to :> integer)).existent == 0)))),L)

predicate edges_valid{L}(__anonstruct_Graph_4[..] g_1, integer n_1) =
\at((\forall integer k_2;
      (((0 <= k_2) && (k_2 < n_1)) ==> edge_valid{L}(g_1, k_2))),L)

predicate graph_valid{L}(__anonstruct_Graph_4[..] g_2) =
\at(((((((((g_2.vsize > (0 :> int32)) && (g_2.esize > (0 :> int32))) &&
           (g_2.esize >= g_2.ecnt)) &&
          (g_2.ecnt >= (0 :> int32))) &&
         \at((if (\at(0,L) <= \at(((g_2.vsize :> integer) - 1),L)) then 
             (((\offset_min(\at(g_2.vertices,L)) <= \at(0,L)) &&
                (\offset_max(\at(g_2.vertices,L)) >=
                  \at(((g_2.vsize :> integer) - 1),L))) &&
               (\forall integer __framac_tmp2;
                 (((\at(0,L) <= __framac_tmp2) &&
                    (__framac_tmp2 <= \at(((g_2.vsize :> integer) - 1),L))) ==>
                   true))) else true),L)) &&
        \at((if (\at(0,L) <= \at(((g_2.esize :> integer) - 1),L)) then 
            (((\offset_min(\at(g_2.edges,L)) <= \at(0,L)) &&
               (\offset_max(\at(g_2.edges,L)) >=
                 \at(((g_2.esize :> integer) - 1),L))) &&
              (\forall integer __framac_tmp1;
                (((\at(0,L) <= __framac_tmp1) &&
                   (__framac_tmp1 <= \at(((g_2.esize :> integer) - 1),L))) ==>
                  true))) else true),L)) &&
       edges_valid{L}(g_2, (g_2.ecnt :> integer))) &&
      (\forall integer k_3;
        ((((g_2.ecnt :> integer) <= k_3) && (k_3 < (g_2.esize :> integer))) ==>
          ((g_2.edges + k_3).existent_0 == 0)))),L)

predicate full{L}(__anonstruct_Graph_4[..] g_3) =
\at(range_existent{L}(g_3, 0, (g_3.esize :> integer)),L)

predicate range_existent{L}(__anonstruct_Graph_4[..] g_4, integer m,
                            integer n_2) =
\at((\forall integer k_4;
      (((m <= k_4) && (k_4 < n_2)) ==>
        (! ((g_4.edges + k_4).existent_0 == 0)))),L)

predicate edge_saved{L1, L2}(__anonstruct_Graph_4[..] g_5, integer k_5) =
((\at((g_5.edges + k_5).from,L1) == \at((g_5.edges + k_5).from,L2)) &&
  ((\at((g_5.edges + k_5).to,L1) == \at((g_5.edges + k_5).to,L2)) &&
    (\at((g_5.edges + k_5).existent_0,L1) ==
      \at((g_5.edges + k_5).existent_0,L2))))

predicate edges_saved{L1, L2}(__anonstruct_Graph_4[..] g_6, integer m_0,
                              integer n_3) =
(\forall integer k_6;
  (((m_0 <= k_6) && (k_6 < n_3)) ==> edge_saved{L1, L2}(g_6, k_6)))

axiomatic EdgesCount {

  logic integer count{L}(__anonstruct_Graph_4[..] g_7, integer f, integer t,
                         integer m_1, integer n_4)
   
  logic integer all_count{L}(__anonstruct_Graph_4[..] g_8, integer f_0,
                             integer t_0) =
  \at(count{L}(g_8, f_0, t_0, 0, (g_8.esize :> integer)),L)
   
  predicate count_saved{L1, L2}(__anonstruct_Graph_4[..] g_9, integer f_1,
                                integer t_1, integer m_2, integer n_5) =
  (count{L1}(g_9, f_1, t_1, m_2, n_5) == count{L2}(g_9, f_1, t_1, m_2, n_5))
   
  axiom count_zero{L} :
  (_C_1 : (\forall __anonstruct_Graph_4[..] g_10;
            (\forall integer f_2;
              (\forall integer t_2;
                (\forall integer m_3;
                  (\forall integer n_6;
                    ((m_3 >= n_6) ==>
                      (count{L}(g_10, f_2, t_2, m_3, n_6) == 0))))))))
   
  predicate count_one_p{L}(__anonstruct_Graph_4[..] g_11, integer f_3,
                           integer t_3, integer m_4) =
  (count{L}(g_11, f_3, t_3, m_4, (m_4 + 1)) ==
    (if (((((g_11.edges + m_4).existent_0 :> integer) != 0) &&
           (((g_11.edges + m_4).from :> integer) == f_3)) &&
          (((g_11.edges + m_4).to :> integer) == t_3)) then 1 else 0))
   
  axiom count_one{L} :
  (_C_2 : (\forall __anonstruct_Graph_4[..] g_12;
            (\forall integer f_4;
              (\forall integer t_4;
                (\forall integer m_5;
                  count_one_p{L}(g_12, f_4, t_4, m_5))))))
   
  predicate count_split_p{L}(__anonstruct_Graph_4[..] g_13, integer f_5,
                             integer t_5, integer m_6, integer n_7,
                             integer k_7) =
  (count{L}(g_13, f_5, t_5, m_6, k_7) ==
    (count{L}(g_13, f_5, t_5, m_6, n_7) + count{L}(g_13, f_5, t_5, n_7, k_7)))
   
  axiom count_split{L} :
  (_C_3 : (\forall __anonstruct_Graph_4[..] g_14;
            (\forall integer f_6;
              (\forall integer t_6;
                (\forall integer m_7;
                  (\forall integer n_8;
                    (\forall integer k_8;
                      (((m_7 <= n_8) && (n_8 <= k_8)) ==>
                        count_split_p{L}(g_14, f_6, t_6, m_7, n_8, k_8)))))))))
   
  axiom count_saved_ax{L1, L2} :
  (_C_4 : (\forall __anonstruct_Graph_4[..] g_15;
            (\forall integer f_7;
              (\forall integer t_7;
                (\forall integer m_8;
                  (\forall integer n_9;
                    (edges_saved{L1,
                      L2}(g_15, m_8, n_9) ==>
                      count_saved{L1,
                      L2}(g_15, f_7, t_7, m_8, n_9))))))))
   
  axiom count_extend{L} :
  (_C_5 : (\forall __anonstruct_Graph_4[..] g_16;
            (\forall integer f_8;
              (\forall integer t_8;
                (\forall integer m_9;
                  (\forall integer n_10;
                    ((\forall integer k_9;
                       (((m_9 <= k_9) && (k_9 < n_10)) ==>
                         ((g_16.edges + k_9).existent_0 == 0))) ==>
                      (count{L}(g_16, f_8, t_8, m_9, n_10) == 0))))))))
  
}

int32 count(__anonstruct_Graph_4[..] g_0, int32 f_0, int32 t_0)
  requires ((_C_39 : ((_C_40 : \at((((\offset_min(\at(g_0,Here)) <=
                                       \at(0,Here)) &&
                                      (\offset_max(\at(g_0,Here)) >=
                                        \at(0,Here))) &&
                                     true),Here)) &&
                       (_C_41 : graph_valid{Here}(g_0)))) &&
             ((_C_42 : is_vertex{Here}(g_0, (f_0 :> integer))) &&
               ((_C_43 : is_vertex{Here}(g_0, (t_0 :> integer))) &&
                 ((_C_44 : ((g_0.vertices + (f_0 :> integer)).existent ==
                             (1 :> int32))) &&
                   (_C_45 : ((g_0.vertices + (t_0 :> integer)).existent ==
                              (1 :> int32)))))));
behavior default:
  ensures (_C_38 : ((\result :> integer) ==
                     all_count{Here}(\at(g_0,Old), (\at(f_0,Old) :> integer),
                                     (\at(t_0,Old) :> integer))));
{  
   (var int32 c);
   
   (var int32 i);
   
   {  (_C_6 : (c = (0 :> int32)));
      
      {  (_C_7 : (i = (0 :> int32)));
         (LoopEntry : 
         loop 
         behavior default:
           invariant (_C_13 : ((_C_14 : ((0 :> int32) <= i)) &&
                                (_C_15 : (i <= g_0.ecnt))));
         behavior default:
           invariant (_C_10 : ((_C_11 : ((0 :> int32) <= c)) &&
                                (_C_12 : (c <= i))));
         behavior default:
           invariant (_C_9 : ((c :> integer) ==
                               count{Here}(g_0, (f_0 :> integer),
                                           (t_0 :> integer), 0,
                                           (i :> integer))));
         variant (_C_8 : ((g_0.ecnt :> integer) - (i :> integer)));
         while (true)
         {  
            {  (LoopCurrent : (if (_C_17 : (i < (_C_16 : g_0.ecnt))) then () else 
                              (goto while_0_break)));
               
               {  (if (_C_32 : (((_C_31 : (_C_30 : ((_C_29 : g_0.edges) + i)).existent_0) :> int32) !=
                                 (0 :> int32))) then (if (_C_28 : ((_C_27 : 
                                                                   (_C_26 : 
                                                                   ((_C_25 : g_0.edges) +
                                                                    i)).from) ==
                                                                    f_0)) then 
                                                     (if (_C_24 : ((_C_23 : 
                                                                   (_C_22 : 
                                                                   ((_C_21 : g_0.edges) +
                                                                    i)).to) ==
                                                                    t_0)) then 
                                                     (_C_20 : (c = (_C_19 : (
                                                                   (_C_18 : 
                                                                   (c +
                                                                    (1 :> int32))) :> int32)))) else ()) else ()) else ());
                  
                  {  
                     (assert for default: (_C_33 : (astraver : (count{Here}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 0,
                                                                 ((i :> integer) +
                                                                   1)) ==
                                                                 (count{Here}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   0,
                                                                   (i :> integer)) +
                                                                   count{Here}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   (i :> integer),
                                                                   ((i :> integer) +
                                                                    1)))))));
                     ()
                  };
                  
                  {  
                     (assert for default: (_C_34 : (astraver : (count{Here}(
                                                                 g_0,
                                                                 (f_0 :> integer),
                                                                 (t_0 :> integer),
                                                                 0,
                                                                 (g_0.esize :> integer)) ==
                                                                 (count{Here}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   0,
                                                                   ((i :> integer) +
                                                                    1)) +
                                                                   count{Here}(
                                                                   g_0,
                                                                   (f_0 :> integer),
                                                                   (t_0 :> integer),
                                                                   ((i :> integer) +
                                                                    1),
                                                                   (g_0.esize :> integer)))))));
                     ()
                  }
               };
               (_C_37 : (i = (_C_36 : ((_C_35 : (i + (1 :> int32))) :> int32))))
            }
         });
         (while_0_break : ())
      };
      
      (return c)
   }
}

unit add_edge(__anonstruct_Graph_4[..] g, int32 f, int32 t)
  requires ((_C_126 : ((_C_127 : \at((((\offset_min(\at(g,Here)) <=
                                         \at(0,Here)) &&
                                        (\offset_max(\at(g,Here)) >=
                                          \at(0,Here))) &&
                                       true),Here)) &&
                        (_C_128 : graph_valid{Here}(g)))) &&
             ((_C_129 : is_vertex{Here}(g, (f :> integer))) &&
               ((_C_130 : is_vertex{Here}(g, (t :> integer))) &&
                 ((_C_131 : (! ((g.vertices + (f :> integer)).existent == 0))) &&
                   ((_C_132 : (! ((g.vertices + (t :> integer)).existent ==
                                   0))) &&
                     (_C_133 : (! full{Here}(g))))))));
behavior default:
  ensures (_C_121 : ((_C_122 : graph_valid{Here}(\at(g,Old))) &&
                      ((_C_124 : (all_count{Here}(\at(g,Old),
                                                  (\at(f,Old) :> integer),
                                                  (\at(t,Old) :> integer)) ==
                                   (all_count{Old}(\at(g,Old),
                                                   (\at(f,Old) :> integer),
                                                   (\at(t,Old) :> integer)) +
                                     1))) &&
                        (_C_125 : (\forall integer f2_11;
                                    (\forall integer t2_11;
                                      (((! (f2_11 == (\at(f,Old) :> integer))) ||
                                         (! (t2_11 ==
                                              (\at(t,Old) :> integer)))) ==>
                                        (all_count{Here}(\at(g,Old), f2_11,
                                                         t2_11) ==
                                          all_count{Old}(\at(g,Old), f2_11,
                                                         t2_11)))))))));
{  
   (var int32 i_0);
   
   {  (if (_C_78 : ((_C_77 : g.ecnt) < (_C_76 : g.esize))) then 
      {  (_C_50 : ((_C_49 : (_C_48 : ((_C_47 : g.edges) + (_C_46 : g.ecnt))).from) = f));
         (_C_55 : ((_C_54 : (_C_53 : ((_C_52 : g.edges) + (_C_51 : g.ecnt))).to) = t));
         (_C_60 : ((_C_59 : (_C_58 : ((_C_57 : g.edges) + (_C_56 : g.ecnt))).existent_0) = (1 :> int32)));
         
         {  
            (assert for default: (_C_61 : (astraver : (edges_saved{Pre,
                                                        Here}(g, 0,
                                                              (g.ecnt :> integer)) &&
                                                        edges_saved{Pre,
                                                        Here}(g,
                                                              ((g.ecnt :> integer) +
                                                                1),
                                                              (g.esize :> integer))))));
            ()
         };
         
         {  
            (assert for default: (_C_62 : (astraver : edge_valid{Here}(
                                          g, (g.ecnt :> integer)))));
            ()
         };
         
         {  
            (assert for default: (_C_63 : (astraver : (count{Here}(g,
                                                                   (f :> integer),
                                                                   (t :> integer),
                                                                   (g.ecnt :> integer),
                                                                   ((g.ecnt :> integer) +
                                                                    1)) ==
                                                        1))));
            ()
         };
         
         {  
            (assert for default: (_C_64 : (astraver : (\forall integer f2;
                                                        (\forall integer t2;
                                                          (count{Pre}(
                                                            g, f2, t2,
                                                            (g.ecnt :> integer),
                                                            ((g.ecnt :> integer) +
                                                              1)) ==
                                                            0))))));
            ()
         };
         
         {  
            (assert for default: (_C_65 : (astraver : (\forall integer f2_0;
                                                        (\forall integer t2_0;
                                                          (((! (f2_0 ==
                                                                 (f :> integer))) ||
                                                             (! (t2_0 ==
                                                                  (t :> integer)))) ==>
                                                            (count{Here}(
                                                              g, f2_0, t2_0,
                                                              (g.ecnt :> integer),
                                                              ((g.ecnt :> integer) +
                                                                1)) ==
                                                              0)))))));
            ()
         };
         
         {  
            (assert for default: (_C_66 : (astraver : (\forall integer f2_1;
                                                        (\forall integer t2_1;
                                                          (count_saved{Pre,
                                                            Here}(g, f2_1,
                                                                  t2_1, 0,
                                                                  (g.ecnt :> integer)) &&
                                                            count_saved{Pre,
                                                            Here}(g, f2_1,
                                                                  t2_1,
                                                                  ((g.ecnt :> integer) +
                                                                    1),
                                                                  (g.esize :> integer))))))));
            ()
         };
         
         {  
            (assert for default: (_C_67 : (astraver : (\forall integer f2_2;
                                                        (\forall integer t2_2;
                                                          (((! (f2_2 ==
                                                                 (f :> integer))) ||
                                                             (! (t2_2 ==
                                                                  (t :> integer)))) ==>
                                                            count_saved{Pre,
                                                            Here}(g, f2_2,
                                                                  t2_2,
                                                                  (g.ecnt :> integer),
                                                                  ((g.ecnt :> integer) +
                                                                    1))))))));
            ()
         };
         
         {  
            (assert for default: (_C_68 : (astraver : (\forall integer f2_3;
                                                        (\forall integer t2_3;
                                                          (all_count{Here}(
                                                            g, f2_3, t2_3) ==
                                                            (all_count{Pre}(
                                                              g, f2_3, t2_3) +
                                                              count{Here}(
                                                              g, f2_3, t2_3,
                                                              (g.ecnt :> integer),
                                                              ((g.ecnt :> integer) +
                                                                1)))))))));
            ()
         };
         
         {  
            (assert for default: (_C_69 : (astraver : (all_count{Here}(
                                                        g, (f :> integer),
                                                        (t :> integer)) ==
                                                        ((count{Here}(
                                                           g, (f :> integer),
                                                           (t :> integer), 0,
                                                           (g.ecnt :> integer)) +
                                                           count{Here}(
                                                           g, (f :> integer),
                                                           (t :> integer),
                                                           (g.ecnt :> integer),
                                                           ((g.ecnt :> integer) +
                                                             1))) +
                                                          count{Here}(
                                                          g, (f :> integer),
                                                          (t :> integer),
                                                          ((g.ecnt :> integer) +
                                                            1),
                                                          (g.esize :> integer)))))));
            ()
         };
         
         {  
            (assert for default: (_C_70 : (astraver : (all_count{Pre}(
                                                        g, (f :> integer),
                                                        (t :> integer)) ==
                                                        ((count{Pre}(
                                                           g, (f :> integer),
                                                           (t :> integer), 0,
                                                           (g.ecnt :> integer)) +
                                                           count{Pre}(
                                                           g, (f :> integer),
                                                           (t :> integer),
                                                           (g.ecnt :> integer),
                                                           ((g.ecnt :> integer) +
                                                             1))) +
                                                          count{Pre}(
                                                          g, (f :> integer),
                                                          (t :> integer),
                                                          ((g.ecnt :> integer) +
                                                            1),
                                                          (g.esize :> integer)))))));
            ()
         };
         (_C_75 : ((_C_74 : g.ecnt) = (_C_73 : ((_C_72 : ((_C_71 : g.ecnt) +
                                                           (1 :> int32))) :> int32))));
         
         (goto return_label)
      } else ());
      
      {  
         (assert for default: (_C_79 : (astraver : (g.esize == g.ecnt))));
         ()
      };
      
      {  (_C_80 : (i_0 = (0 :> int32)));
         (LoopEntry : 
         loop 
         behavior default:
           invariant (_C_85 : ((_C_86 : ((0 :> int32) <= i_0)) &&
                                (_C_87 : (i_0 <= g.ecnt))));
         behavior default:
           invariant (_C_84 : edges_saved{Pre,
                     Here}(g, 0, (g.ecnt :> integer)));
         behavior default:
           invariant (_C_83 : (\forall integer f2_10;
                                (\forall integer t2_10;
                                  (all_count{Pre}(g, f2_10, t2_10) ==
                                    all_count{Here}(g, f2_10, t2_10)))));
         behavior default:
           invariant (_C_82 : range_existent{Here}(g, 0, (i_0 :> integer)));
         variant (_C_81 : ((g.ecnt :> integer) - (i_0 :> integer)));
         while (true)
         {  
            {  (LoopCurrent : (if (_C_89 : (i_0 < (_C_88 : g.ecnt))) then () else 
                              (goto while_0_break_0)));
               
               {  (_L : ());
                  (if (_C_114 : (! (((_C_113 : (_C_112 : ((_C_111 : g.edges) +
                                                           i_0)).existent_0) :> int32) !=
                                     (0 :> int32)))) then 
                  {  (_C_93 : ((_C_92 : (_C_91 : ((_C_90 : g.edges) + i_0)).from) = f));
                     (_C_97 : ((_C_96 : (_C_95 : ((_C_94 : g.edges) + i_0)).to) = t));
                     (_C_101 : ((_C_100 : (_C_99 : ((_C_98 : g.edges) + i_0)).existent_0) = (1 :> int32)));
                     
                     {  
                        (assert for default: (_C_102 : (astraver : (edges_saved{Pre,
                                                                    Here}(
                                                                    g, 0,
                                                                    (i_0 :> integer)) &&
                                                                    edges_saved{Pre,
                                                                    Here}(
                                                                    g,
                                                                    ((i_0 :> integer) +
                                                                    1),
                                                                    (g.esize :> integer))))));
                        ()
                     };
                     
                     {  
                        (assert for default: (_C_103 : (astraver : edge_valid{Here}(
                                                       g, (i_0 :> integer)))));
                        ()
                     };
                     
                     {  
                        (assert for default: (_C_104 : (astraver : (count{Here}(
                                                                    g,
                                                                    (f :> integer),
                                                                    (t :> integer),
                                                                    (i_0 :> integer),
                                                                    ((i_0 :> integer) +
                                                                    1)) ==
                                                                    1))));
                        ()
                     };
                     
                     {  
                        (assert for default: (_C_105 : (astraver : (\forall integer f2_4;
                                                                    (\forall integer t2_4;
                                                                    (count{Pre}(
                                                                    g, f2_4,
                                                                    t2_4,
                                                                    (i_0 :> integer),
                                                                    ((i_0 :> integer) +
                                                                    1)) ==
                                                                    0))))));
                        ()
                     };
                     
                     {  
                        (assert for default: (_C_106 : (astraver : (\forall integer f2_5;
                                                                    (\forall integer t2_5;
                                                                    (((! 
                                                                    (f2_5 ==
                                                                    (f :> integer))) ||
                                                                    (! 
                                                                    (t2_5 ==
                                                                    (t :> integer)))) ==>
                                                                    (count{Here}(
                                                                    g, f2_5,
                                                                    t2_5,
                                                                    (i_0 :> integer),
                                                                    ((i_0 :> integer) +
                                                                    1)) ==
                                                                    0)))))));
                        ()
                     };
                     
                     {  
                        (assert for default: (_C_107 : (astraver : (\forall integer f2_6;
                                                                    (\forall integer t2_6;
                                                                    (count_saved{Pre,
                                                                    Here}(
                                                                    g, f2_6,
                                                                    t2_6, 0,
                                                                    (i_0 :> integer)) &&
                                                                    count_saved{Pre,
                                                                    Here}(
                                                                    g, f2_6,
                                                                    t2_6,
                                                                    ((i_0 :> integer) +
                                                                    1),
                                                                    (g.esize :> integer))))))));
                        ()
                     };
                     
                     {  
                        (assert for default: (_C_108 : (astraver : (\forall integer f2_7;
                                                                    (\forall integer t2_7;
                                                                    (((! 
                                                                    (f2_7 ==
                                                                    (f :> integer))) ||
                                                                    (! 
                                                                    (t2_7 ==
                                                                    (t :> integer)))) ==>
                                                                    count_saved{Pre,
                                                                    Here}(
                                                                    g, f2_7,
                                                                    t2_7,
                                                                    (i_0 :> integer),
                                                                    ((i_0 :> integer) +
                                                                    1))))))));
                        ()
                     };
                     
                     {  
                        (assert for default: (_C_109 : (astraver : (\forall integer f2_8;
                                                                    (\forall integer t2_8;
                                                                    (all_count{Here}(
                                                                    g, f2_8,
                                                                    t2_8) ==
                                                                    ((count{Here}(
                                                                    g, f2_8,
                                                                    t2_8, 0,
                                                                    (i_0 :> integer)) +
                                                                    count{Here}(
                                                                    g, f2_8,
                                                                    t2_8,
                                                                    (i_0 :> integer),
                                                                    ((i_0 :> integer) +
                                                                    1))) +
                                                                    count{Here}(
                                                                    g, f2_8,
                                                                    t2_8,
                                                                    ((i_0 :> integer) +
                                                                    1),
                                                                    (g.esize :> integer)))))))));
                        ()
                     };
                     
                     {  
                        (assert for default: (_C_110 : (astraver : (all_count{Pre}(
                                                                    g,
                                                                    (f :> integer),
                                                                    (t :> integer)) ==
                                                                    ((count{Pre}(
                                                                    g,
                                                                    (f :> integer),
                                                                    (t :> integer),
                                                                    0,
                                                                    (i_0 :> integer)) +
                                                                    count{Pre}(
                                                                    g,
                                                                    (f :> integer),
                                                                    (t :> integer),
                                                                    (i_0 :> integer),
                                                                    ((i_0 :> integer) +
                                                                    1))) +
                                                                    count{Pre}(
                                                                    g,
                                                                    (f :> integer),
                                                                    (t :> integer),
                                                                    ((i_0 :> integer) +
                                                                    1),
                                                                    (g.esize :> integer)))))));
                        ()
                     };
                     
                     (goto return_label)
                  } else ());
                  
                  {  
                     (assert for default: (_C_115 : (astraver : edges_saved{_L,
                                                    Here}(g, 0,
                                                          (g.ecnt :> integer)))));
                     ()
                  };
                  
                  {  
                     (assert for default: (_C_116 : (astraver : (\forall integer f2_9;
                                                                  (\forall integer t2_9;
                                                                    (all_count{_L}(
                                                                    g, f2_9,
                                                                    t2_9) ==
                                                                    all_count{Here}(
                                                                    g, f2_9,
                                                                    t2_9)))))));
                     ()
                  }
               };
               (_C_119 : (i_0 = (_C_118 : ((_C_117 : (i_0 + (1 :> int32))) :> int32))))
            }
         });
         (while_0_break_0 : ())
      };
      
      {  
         (assert for default: (_C_120 : (astraver : full{Here}(g))));
         ()
      };
      (return_label : 
      (return ()))
   }
}
