
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_unsafe

  use why3.Bool.Bool 
  
end

theory Root___anonstruct_Graph_4

  use why3.Bool.Bool 
  
  type __anonstruct_Graph_4 
  
end

theory Root___anonstruct_Edge_3

  use why3.Bool.Bool 
  
  type __anonstruct_Edge_3 
  
end

theory Logic_edge_saved

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate edge_saved (g_5 : (pointer __anonstruct_Graph_4)) (k_5 : int)
  (__anonstruct_Graph_4_edges_g_5_8_at_L2 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_edges_g_5_8_at_L1 :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_22_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_22_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_22_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_22_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_22_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_22_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((Int32.(=)
      (select __anonstruct_Edge_3_from_edges_22_at_L1
      (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L1 g_5) k_5))
      (select __anonstruct_Edge_3_from_edges_22_at_L2
      (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L2 g_5) k_5)))
     /\
     ((Int32.(=)
      (select __anonstruct_Edge_3_to_edges_22_at_L1
      (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L1 g_5) k_5))
      (select __anonstruct_Edge_3_to_edges_22_at_L2
      (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L2 g_5) k_5)))
     /\
     (Int32.(=)
     (select __anonstruct_Edge_3_existent_0_edges_22_at_L1
     (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L1 g_5) k_5))
     (select __anonstruct_Edge_3_existent_0_edges_22_at_L2
     (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L2 g_5) k_5)))))
  
  
end

theory Logic_edges_saved

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_saved 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_saved (g_6 : (pointer __anonstruct_Graph_4)) (m_0 : int)
  (n_3 : int) (__anonstruct_Graph_4_edges_g_6_9_at_L2 : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_edges_g_6_9_at_L1 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_54_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_54_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_54_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_54_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_54_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_54_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     (forall k_6 : int.
      ((((<=) m_0 k_6) /\ ((<) k_6 n_3)) ->
       (edge_saved g_6 k_6 __anonstruct_Graph_4_edges_g_6_9_at_L2
       __anonstruct_Graph_4_edges_g_6_9_at_L1
       __anonstruct_Edge_3_existent_0_edges_54_at_L2
       __anonstruct_Edge_3_existent_0_edges_54_at_L1
       __anonstruct_Edge_3_to_edges_54_at_L2
       __anonstruct_Edge_3_to_edges_54_at_L1
       __anonstruct_Edge_3_from_edges_54_at_L2
       __anonstruct_Edge_3_from_edges_54_at_L1)))
  
  
end

theory Axiomatic_EdgesCount

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_saved 
  
  use enum.Int32 
  
  use import int.Int 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  function count (pointer __anonstruct_Graph_4) int int int int (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)) (memory
  __anonstruct_Edge_3 Int32.t) (memory __anonstruct_Edge_3 Int32.t) (memory
  __anonstruct_Edge_3 Int32.t) : int
  
  
  axiom Count_zero
  #"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 92 61 168#
  "expl:Axiom count_zero"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_24_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_24_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_24_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 94 22 104#
      (forall g_10_0 : (pointer __anonstruct_Graph_4).
       (forall f_2_0 : int.
        (forall t_2_0 : int.
         (forall m_3 : int.
          (forall n_6 : int.
           (((>=) m_3 n_6) ->
            ((=)
            (count g_10_0 f_2_0 t_2_0 m_3 n_6
            __anonstruct_Graph_4_edges_g_7_10_at_L
            __anonstruct_Edge_3_existent_0_edges_24_at_L
            __anonstruct_Edge_3_to_edges_24_at_L
            __anonstruct_Edge_3_from_edges_24_at_L) (0)))))))))))))
  
  predicate count_one_p (g_11 : (pointer __anonstruct_Graph_4)) (f_3 : int)
  (t_3 : int) (m_4 : int) (__anonstruct_Graph_4_edges_g_7_10_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_24_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_24_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_24_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_11 f_3 t_3 m_4 (Int.(+) m_4 (1))
     __anonstruct_Graph_4_edges_g_7_10_at_L
     __anonstruct_Edge_3_existent_0_edges_24_at_L
     __anonstruct_Edge_3_to_edges_24_at_L
     __anonstruct_Edge_3_from_edges_24_at_L)
     (if
      (Bool.andb
      (Bool.andb
      ((<>)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_24_at_L
      (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4))) (0))
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_from_edges_24_at_L
      (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4))) f_3))
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_24_at_L
      (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_11) m_4))) t_3))
      then (1) else (0)))
  
  
  axiom Count_one
  #"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 98 115 200#
  "expl:Axiom count_one"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_24_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_24_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_24_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 100 24 82#
      (forall g_12 : (pointer __anonstruct_Graph_4).
       (forall f_4 : int.
        (forall t_4 : int.
         (forall m_5 : int.
          (count_one_p g_12 f_4 t_4 m_5
          __anonstruct_Graph_4_edges_g_7_10_at_L
          __anonstruct_Edge_3_existent_0_edges_24_at_L
          __anonstruct_Edge_3_to_edges_24_at_L
          __anonstruct_Edge_3_from_edges_24_at_L))))))))))
  
  predicate count_split_p (g_13 : (pointer __anonstruct_Graph_4)) (f_5 : int)
  (t_5 : int) (m_6 : int) (n_7 : int) (k_7 : int)
  (__anonstruct_Graph_4_edges_g_7_10_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_24_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_24_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_24_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_13 f_5 t_5 m_6 k_7 __anonstruct_Graph_4_edges_g_7_10_at_L
     __anonstruct_Edge_3_existent_0_edges_24_at_L
     __anonstruct_Edge_3_to_edges_24_at_L
     __anonstruct_Edge_3_from_edges_24_at_L)
     (Int.(+)
     (count g_13 f_5 t_5 m_6 n_7 __anonstruct_Graph_4_edges_g_7_10_at_L
     __anonstruct_Edge_3_existent_0_edges_24_at_L
     __anonstruct_Edge_3_to_edges_24_at_L
     __anonstruct_Edge_3_from_edges_24_at_L)
     (count g_13 f_5 t_5 n_7 k_7 __anonstruct_Graph_4_edges_g_7_10_at_L
     __anonstruct_Edge_3_existent_0_edges_24_at_L
     __anonstruct_Edge_3_to_edges_24_at_L
     __anonstruct_Edge_3_from_edges_24_at_L)))
  
  
  axiom Count_split
  #"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 103 76 201#
  "expl:Axiom count_split"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_24_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_24_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_24_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 105 26 122#
      (forall g_14 : (pointer __anonstruct_Graph_4).
       (forall f_6 : int.
        (forall t_6 : int.
         (forall m_7 : int.
          (forall n_8 : int.
           (forall k_8 : int.
            ((((<=) m_7 n_8) /\ ((<=) n_8 k_8)) ->
             (count_split_p g_14 f_6 t_6 m_7 n_8 k_8
             __anonstruct_Graph_4_edges_g_7_10_at_L
             __anonstruct_Edge_3_existent_0_edges_24_at_L
             __anonstruct_Edge_3_to_edges_24_at_L
             __anonstruct_Edge_3_from_edges_24_at_L)))))))))))))
  
  predicate count_saved (g_9 : (pointer __anonstruct_Graph_4)) (f_1 : int)
  (t_1 : int) (m_2 : int) (n_5 : int)
  (__anonstruct_Graph_4_edges_g_7_10_at_L2 : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_edges_g_7_10_at_L1 :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_24_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_existent_0_edges_24_at_L1 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_24_at_L2 :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Edge_3_to_edges_24_at_L1 : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_from_edges_24_at_L2 : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_24_at_L1 :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_9 f_1 t_1 m_2 n_5 __anonstruct_Graph_4_edges_g_7_10_at_L1
     __anonstruct_Edge_3_existent_0_edges_24_at_L1
     __anonstruct_Edge_3_to_edges_24_at_L1
     __anonstruct_Edge_3_from_edges_24_at_L1)
     (count g_9 f_1 t_1 m_2 n_5 __anonstruct_Graph_4_edges_g_7_10_at_L2
     __anonstruct_Edge_3_existent_0_edges_24_at_L2
     __anonstruct_Edge_3_to_edges_24_at_L2
     __anonstruct_Edge_3_from_edges_24_at_L2))
  
  
  axiom Count_saved_ax
  #"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 106 40 190#
  "expl:Axiom count_saved_ax"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L2 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Graph_4_edges_g_7_10_at_L1 : (memory
    __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
    (forall __anonstruct_Edge_3_existent_0_edges_24_at_L2 : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_existent_0_edges_24_at_L1 : (memory
      __anonstruct_Edge_3 Int32.t).
      (forall __anonstruct_Edge_3_to_edges_24_at_L2 : (memory
       __anonstruct_Edge_3 Int32.t).
       (forall __anonstruct_Edge_3_to_edges_24_at_L1 : (memory
        __anonstruct_Edge_3 Int32.t).
        (forall __anonstruct_Edge_3_from_edges_24_at_L2 : (memory
         __anonstruct_Edge_3 Int32.t).
         (forall __anonstruct_Edge_3_from_edges_24_at_L1 : (memory
          __anonstruct_Edge_3 Int32.t).
          (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 108 34 147#
          (forall g_15 : (pointer __anonstruct_Graph_4).
           (forall f_7 : int.
            (forall t_7 : int.
             (forall m_8 : int.
              (forall n_9 : int.
               ((edges_saved g_15 m_8 n_9
                __anonstruct_Graph_4_edges_g_7_10_at_L2
                __anonstruct_Graph_4_edges_g_7_10_at_L1
                __anonstruct_Edge_3_existent_0_edges_24_at_L2
                __anonstruct_Edge_3_existent_0_edges_24_at_L1
                __anonstruct_Edge_3_to_edges_24_at_L2
                __anonstruct_Edge_3_to_edges_24_at_L1
                __anonstruct_Edge_3_from_edges_24_at_L2
                __anonstruct_Edge_3_from_edges_24_at_L1) ->
                (count_saved g_15 f_7 t_7 m_8 n_9
                __anonstruct_Graph_4_edges_g_7_10_at_L2
                __anonstruct_Graph_4_edges_g_7_10_at_L1
                __anonstruct_Edge_3_existent_0_edges_24_at_L2
                __anonstruct_Edge_3_existent_0_edges_24_at_L1
                __anonstruct_Edge_3_to_edges_24_at_L2
                __anonstruct_Edge_3_to_edges_24_at_L1
                __anonstruct_Edge_3_from_edges_24_at_L2
                __anonstruct_Edge_3_from_edges_24_at_L1))))))))))))))))
  
  axiom Count_extend
  #"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 109 76 236#
  "expl:Axiom count_extend"  :
  (forall __anonstruct_Graph_4_edges_g_7_10_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_24_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_24_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_24_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 111 24 157#
      (forall g_16 : (pointer __anonstruct_Graph_4).
       (forall f_8 : int.
        (forall t_8 : int.
         (forall m_9 : int.
          (forall n_10 : int.
           ((forall k_9 : int.
             ((((<=) m_9 k_9) /\ ((<) k_9 n_10)) ->
              ((=)
              (Int32.to_int
              (select __anonstruct_Edge_3_existent_0_edges_24_at_L
              (shift (select __anonstruct_Graph_4_edges_g_7_10_at_L g_16)
              k_9))) (0)))) ->
            ((=)
            (count g_16 f_8 t_8 m_9 n_10
            __anonstruct_Graph_4_edges_g_7_10_at_L
            __anonstruct_Edge_3_existent_0_edges_24_at_L
            __anonstruct_Edge_3_to_edges_24_at_L
            __anonstruct_Edge_3_from_edges_24_at_L) (0)))))))))))))
  
  function all_count (g_8 : (pointer __anonstruct_Graph_4)) (f_0 : int) (t_0
  : int) (__anonstruct_Graph_4_esize_g_8_11_at_L : (memory
  __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_edges_g_8_11_at_L :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_84_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_84_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_84_at_L :
  (memory __anonstruct_Edge_3 Int32.t)) : int
  =
     (count g_8 f_0 t_0 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_8_11_at_L g_8))
     __anonstruct_Graph_4_edges_g_8_11_at_L
     __anonstruct_Edge_3_existent_0_edges_84_at_L
     __anonstruct_Edge_3_to_edges_84_at_L
     __anonstruct_Edge_3_from_edges_84_at_L)
  
  
end

theory Root___anonstruct_Vertex_2

  use why3.Bool.Bool 
  
  type __anonstruct_Vertex_2 
  
end

theory Logic_is_vertex

  use import Root___anonstruct_Graph_4 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate is_vertex (g : (pointer __anonstruct_Graph_4)) (v : int)
  (__anonstruct_Graph_4_vsize_g_2_at_L : (memory __anonstruct_Graph_4
  Int32.t))
  =
     (((<=) (0) v) /\
     ((<) v (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_at_L g))))
  
  
end

theory Logic_edge_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edge_valid (g_0 : (pointer __anonstruct_Graph_4)) (k_1 : int)
  (__anonstruct_Graph_4_edges_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_0_3_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_17_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_17_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_17_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_18_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_17_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))) (0)))
      ->
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_17_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_to_edges_17_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_18_at_L
       (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_17_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
       (0)))
      /\
      (not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_18_at_L
      (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_17_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
      (0)))))))
  
  
end

theory Logic_edges_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_valid (g_1 : (pointer __anonstruct_Graph_4)) (n_1 : int)
  (__anonstruct_Graph_4_edges_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_1_4_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_38_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_38_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_38_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_39_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     (forall k_2 : int.
      ((((<=) (0) k_2) /\ ((<) k_2 n_1)) ->
       (edge_valid g_1 k_2 __anonstruct_Graph_4_edges_g_1_4_at_L
       __anonstruct_Graph_4_vsize_g_1_4_at_L
       __anonstruct_Graph_4_vertices_g_1_4_at_L
       __anonstruct_Edge_3_existent_0_edges_38_at_L
       __anonstruct_Edge_3_to_edges_38_at_L
       __anonstruct_Edge_3_from_edges_38_at_L
       __anonstruct_Vertex_2_existent_vertices_39_at_L)))
  
  
end

theory Logic_graph_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate graph_valid (g_2 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Vertex_2_vertices_19_alloc_table_at_L : (alloc_table
  __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_20_alloc_table_at_L :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Graph_4_esize_g_2_5_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_ecnt_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_vsize_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_vertices_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_20_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_20_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_20_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_19_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((Int32.(>) (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)
      (#"graph_c.jc" 59 24 36# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (#"graph_c.jc" 59 54 66# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)
      (#"graph_c.jc" 61 23 35# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Vertex_2_vertices_19_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Vertex_2_vertices_19_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp2 : int.
        ((((<=) (0) __framac_tmp2) /\
         ((<=) __framac_tmp2
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Edge_3_edges_20_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Edge_3_edges_20_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((edges_valid g_2
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
      __anonstruct_Graph_4_edges_g_2_5_at_L
      __anonstruct_Graph_4_vsize_g_2_5_at_L
      __anonstruct_Graph_4_vertices_g_2_5_at_L
      __anonstruct_Edge_3_existent_0_edges_20_at_L
      __anonstruct_Edge_3_to_edges_20_at_L
      __anonstruct_Edge_3_from_edges_20_at_L
      __anonstruct_Vertex_2_existent_vertices_19_at_L)
     /\
     (forall k_3 : int.
      ((((<=)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)) k_3)
       /\
       ((<) k_3
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)))) ->
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_20_at_L
       (shift (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2) k_3))) (0)))))))))))
  
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_while_0_break_exc unit
  
  exception Goto_while_0_break_0_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Function_count_0_safety
#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 125 0 29#
"expl:count, safety"

  use import core.Tag_table_type 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use import core.Acc_offset_safe 
  
  use why3.Bool.Bool 
  
  let count_0 #"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 125 0 29#
  "expl:Function count, safety" =
  fun
   (g_0_0 : (pointer __anonstruct_Graph_4)) (f_0_0 : Int32.t) (t_0_0 :
   Int32.t) (__anonstruct_Edge_3_edges_31_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_0_15_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_30_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_31_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_30 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_31 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_31 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_31 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Graph_4_vertices_g_0_15 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_0_15 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_g_0_15 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_g_0_15 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_g_0_15 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"graph_c.jc" 180 12 740#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 117 13 22#
    (#"graph_c.jc" 180 12 740#
    ((#"graph_c.jc" 180 12 740#
     ((<=) (offset_min __anonstruct_Graph_4_g_0_15_alloc_table g_0_0) (0)))
    /\
    (#"graph_c.jc" 180 12 740#
    ((#"graph_c.jc" 180 12 740#
     ((>=) (offset_max __anonstruct_Graph_4_g_0_15_alloc_table g_0_0) (0)))
    /\ (#"graph_c.jc" 180 12 740# ((=) true true)))))))
   /\
   (#"graph_c.jc" 180 12 740#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 117 26 40#
    (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_30_alloc_table
    __anonstruct_Edge_3_edges_31_alloc_table
    __anonstruct_Graph_4_esize_g_0_15 __anonstruct_Graph_4_ecnt_g_0_15
    __anonstruct_Graph_4_edges_g_0_15 __anonstruct_Graph_4_vsize_g_0_15
    __anonstruct_Graph_4_vertices_g_0_15
    __anonstruct_Edge_3_existent_0_edges_31 __anonstruct_Edge_3_to_edges_31
    __anonstruct_Edge_3_from_edges_31
    __anonstruct_Vertex_2_existent_vertices_30))
   /\
   (#"graph_c.jc" 180 12 740#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 118 13 28#
    (is_vertex g_0_0 (Int32.to_int f_0_0) __anonstruct_Graph_4_vsize_g_0_15))
   /\
   (#"graph_c.jc" 180 12 740#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 119 13 28#
    (is_vertex g_0_0 (Int32.to_int t_0_0) __anonstruct_Graph_4_vsize_g_0_15))
   /\
   (#"graph_c.jc" 180 12 740#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 120 13 41#
    (Int32.(=)
    (select __anonstruct_Vertex_2_existent_vertices_30
    (shift (select __anonstruct_Graph_4_vertices_g_0_15 g_0_0)
    (Int32.to_int f_0_0))) (#"graph_c.jc" 189 29 41# "expl:Integer cast"
    (Int32.of_int (1)))))
   /\
   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 121 13 41#
   (Int32.(=)
   (select __anonstruct_Vertex_2_existent_vertices_30
   (shift (select __anonstruct_Graph_4_vertices_g_0_15 g_0_0)
   (Int32.to_int t_0_0))) (#"graph_c.jc" 191 30 42# "expl:Integer cast"
   (Int32.of_int (1))))))))))))))) } ensures { ("expl:Postcondition" true) } 
   ->
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (let c = ref (Safe_int32.any_  () ) in
    (let i = ref (Safe_int32.any_  () ) in
    begin
    (c :=
     (let _jessie_13 =
     (#"graph_c.jc" 201 19 31# "expl:Integer cast" (Safe_int32.of_int (0)))
     in
     begin
     (assert {
     (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 127 8 9#
     "expl:Pointer index bounds" true) }); _jessie_13 end));
     try
      begin
      (i :=
       (let _jessie_16 =
       (#"graph_c.jc" 203 22 34# "expl:Integer cast" (Safe_int32.of_int (0)))
       in
       begin
       (assert {
       (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 134 13 14#
       "expl:Pointer index bounds" true) }); _jessie_16 end));
       'LoopEntry:
       begin
       'LoopEntry:
       'Loop_2:
       loop
       invariant { (#"graph_c.jc" 205 9 5572# true) }
         variant {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 132 21 32#
           (Int.(-)
           (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_15 g_0_0))
           (Int32.to_int !i))) }
        begin
        any unit
        requires { true } reads { f_0_0, g_0_0, t_0_0 }
        ensures {
          ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 131 23 48#
           ((=) (Int32.to_int !c)
           (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
           (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_15
           __anonstruct_Edge_3_existent_0_edges_31
           __anonstruct_Edge_3_to_edges_31 __anonstruct_Edge_3_from_edges_31)))
          /\
          ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 130 23 34#
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 130 23 34#
           ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 130 23 29#
            (Int32.(<=) (#"graph_c.jc" 210 41 53# "expl:Integer cast"
            (Int32.of_int (0))) !c))
           /\
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 130 28 34#
           (Int32.(<=) !c !i)))))
          /\
          (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 129 23 40#
          (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 129 23 40#
          ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 129 23 29#
           (Int32.(<=) (#"graph_c.jc" 207 41 53# "expl:Integer cast"
           (Int32.of_int (0))) !i))
          /\
          (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 129 28 40#
          (Int32.(<=) !i (select __anonstruct_Graph_4_ecnt_g_0_15 g_0_0))))))))
          } ;
         try
          begin
          'LoopCurrent:
          begin
          'LoopCurrent:
          (if
          (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 134 20 31#
          (Safe_int32.(<)  !i
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 134 24 31#
           "expl:Pointer dereference"
           (acc  __anonstruct_Graph_4_g_0_15_alloc_table
            __anonstruct_Graph_4_ecnt_g_0_15 g_0_0 )) )) then ()
          else (raise (Goto_while_0_break_exc ())));
           begin
           (if
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 12 32#
           (Safe_int32.(<>) 
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 12 32#
            "expl:Pointer dereference"
            (acc_offset_typesafe  __anonstruct_Edge_3_edges_31_alloc_table
             __anonstruct_Edge_3_existent_0_edges_31
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 12 20#
             "expl:Pointer dereference"
             (acc  __anonstruct_Graph_4_g_0_15_alloc_table
              __anonstruct_Graph_4_edges_g_0_15 g_0_0 ))
             (Safe_int32.to_int  !i ) ))
            (#"graph_c.jc" 224 33 45# "expl:Integer cast"
            (Safe_int32.of_int (0))) ))
           then
            (if
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 36 57#
            (Safe_int32.(=) 
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 36 52#
             "expl:Pointer dereference"
             (acc_offset_typesafe  __anonstruct_Edge_3_edges_31_alloc_table
              __anonstruct_Edge_3_from_edges_31
              (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 36 44#
              "expl:Pointer dereference"
              (acc  __anonstruct_Graph_4_g_0_15_alloc_table
               __anonstruct_Graph_4_edges_g_0_15 g_0_0 ))
              (Safe_int32.to_int  !i ) )) f_0_0 ))
            then
             (if
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 61 80#
             (Safe_int32.(=) 
              (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 61 75#
              "expl:Pointer dereference"
              (acc_offset_typesafe  __anonstruct_Edge_3_edges_31_alloc_table
               __anonstruct_Edge_3_to_edges_31
               (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 61 69#
               "expl:Pointer dereference"
               (acc  __anonstruct_Graph_4_g_0_15_alloc_table
                __anonstruct_Graph_4_edges_g_0_15 g_0_0 ))
               (Safe_int32.to_int  !i ) )) t_0_0 ))
             then
              (c :=
               (let _jessie_14 =
               (Safe_int32.(+)  !c
                (#"graph_c.jc" 237 68 80# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) in
               begin
               (assert {
               (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 136 12 16#
               "expl:Pointer index bounds" true) }); _jessie_14 end))
             else ()) else ()) else ());
            begin
            any unit
            requires { true } reads { f_0_0, g_0_0, t_0_0 }
            ensures {
              (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 138 19 94#
              ((=)
              (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
              (Int.(+) (Int32.to_int !i) (1))
              __anonstruct_Graph_4_edges_g_0_15
              __anonstruct_Edge_3_existent_0_edges_31
              __anonstruct_Edge_3_to_edges_31
              __anonstruct_Edge_3_from_edges_31)
              (Int.(+)
              (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
              (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_15
              __anonstruct_Edge_3_existent_0_edges_31
              __anonstruct_Edge_3_to_edges_31
              __anonstruct_Edge_3_from_edges_31)
              (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
              (Int32.to_int !i) (Int.(+) (Int32.to_int !i) (1))
              __anonstruct_Graph_4_edges_g_0_15
              __anonstruct_Edge_3_existent_0_edges_31
              __anonstruct_Edge_3_to_edges_31
              __anonstruct_Edge_3_from_edges_31)))) } ; () end;
            begin
            any unit
            requires { true } reads { f_0_0, g_0_0, t_0_0 }
            ensures {
              (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 139 19 108#
              ((=)
              (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
              (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_15 g_0_0))
              __anonstruct_Graph_4_edges_g_0_15
              __anonstruct_Edge_3_existent_0_edges_31
              __anonstruct_Edge_3_to_edges_31
              __anonstruct_Edge_3_from_edges_31)
              (Int.(+)
              (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
              (Int.(+) (Int32.to_int !i) (1))
              __anonstruct_Graph_4_edges_g_0_15
              __anonstruct_Edge_3_existent_0_edges_31
              __anonstruct_Edge_3_to_edges_31
              __anonstruct_Edge_3_from_edges_31)
              (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
              (Int.(+) (Int32.to_int !i) (1))
              (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_15 g_0_0))
              __anonstruct_Graph_4_edges_g_0_15
              __anonstruct_Edge_3_existent_0_edges_31
              __anonstruct_Edge_3_to_edges_31
              __anonstruct_Edge_3_from_edges_31)))) } ; () end end;
           (i :=
            (let _jessie_15 =
            (Safe_int32.(+)  !i
             (#"graph_c.jc" 287 53 65# "expl:Integer cast"
             (Safe_int32.of_int (1))) ) in
            begin
            (assert {
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 134 33 36#
            "expl:Pointer index bounds" true) }); _jessie_15 end)) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_3 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_1 ->
      'While_0_break: 'While_0_break: () end;
     begin
     (return :=
      (let _jessie_17 = !c in
      begin
      (assert { (#"graph_c.jc" 293 7 15# "expl:Pointer index bounds" true) });
       _jessie_17 end)); (raise Return) end end)); absurd  end with Return ->
    !return end)
  
end

module Function_count_0_behaviors
#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 125 0 29#
"expl:count, behaviors"

  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let count_ensures_default
  #"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 125 0 29#
  "expl:Function count, default behavior" =
  fun
   (g_0_0 : (pointer __anonstruct_Graph_4)) (f_0_0 : Int32.t) (t_0_0 :
   Int32.t) (__anonstruct_Edge_3_edges_31_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_0_15_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_30_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_31_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_30 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_31 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_31 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_31 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Graph_4_vertices_g_0_15 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_0_15 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_g_0_15 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_g_0_15 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_g_0_15 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"graph_c.jc" 180 12 740#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 117 13 22#
    (#"graph_c.jc" 180 12 740#
    ((#"graph_c.jc" 180 12 740#
     ((<=) (offset_min __anonstruct_Graph_4_g_0_15_alloc_table g_0_0) (0)))
    /\
    (#"graph_c.jc" 180 12 740#
    ((#"graph_c.jc" 180 12 740#
     ((>=) (offset_max __anonstruct_Graph_4_g_0_15_alloc_table g_0_0) (0)))
    /\ (#"graph_c.jc" 180 12 740# ((=) true true)))))))
   /\
   (#"graph_c.jc" 180 12 740#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 117 26 40#
    (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_30_alloc_table
    __anonstruct_Edge_3_edges_31_alloc_table
    __anonstruct_Graph_4_esize_g_0_15 __anonstruct_Graph_4_ecnt_g_0_15
    __anonstruct_Graph_4_edges_g_0_15 __anonstruct_Graph_4_vsize_g_0_15
    __anonstruct_Graph_4_vertices_g_0_15
    __anonstruct_Edge_3_existent_0_edges_31 __anonstruct_Edge_3_to_edges_31
    __anonstruct_Edge_3_from_edges_31
    __anonstruct_Vertex_2_existent_vertices_30))
   /\
   (#"graph_c.jc" 180 12 740#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 118 13 28#
    (is_vertex g_0_0 (Int32.to_int f_0_0) __anonstruct_Graph_4_vsize_g_0_15))
   /\
   (#"graph_c.jc" 180 12 740#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 119 13 28#
    (is_vertex g_0_0 (Int32.to_int t_0_0) __anonstruct_Graph_4_vsize_g_0_15))
   /\
   (#"graph_c.jc" 180 12 740#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 120 13 41#
    (Int32.(=)
    (select __anonstruct_Vertex_2_existent_vertices_30
    (shift (select __anonstruct_Graph_4_vertices_g_0_15 g_0_0)
    (Int32.to_int f_0_0))) (#"graph_c.jc" 189 29 41# "expl:Integer cast"
    (Int32.of_int (1)))))
   /\
   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 121 13 41#
   (Int32.(=)
   (select __anonstruct_Vertex_2_existent_vertices_30
   (shift (select __anonstruct_Graph_4_vertices_g_0_15 g_0_0)
   (Int32.to_int t_0_0))) (#"graph_c.jc" 191 30 42# "expl:Integer cast"
   (Int32.of_int (1))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 122 12 41#
     "expl:Ensures clause"
     ((=) (Int32.to_int result)
     (all_count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
     __anonstruct_Graph_4_esize_g_0_15 __anonstruct_Graph_4_edges_g_0_15
     __anonstruct_Edge_3_existent_0_edges_31 __anonstruct_Edge_3_to_edges_31
     __anonstruct_Edge_3_from_edges_31)))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (let c = ref (Unsafe_int32.any_  () ) in
    (let i = ref (Unsafe_int32.any_  () ) in
    begin
    (c :=
     (#"graph_c.jc" 201 19 31# "expl:Integer cast" (Unsafe_int32.of_int (0))));
     try
      begin
      (i :=
       (#"graph_c.jc" 203 22 34# "expl:Integer cast"
       (Unsafe_int32.of_int (0))));
       'LoopEntry:
       begin
       'LoopEntry:
       'Loop_1:
       loop
       invariant
         { ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 129 23 40#
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 129 23 40#
            ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 129 23 29#
             (Int32.(<=) (#"graph_c.jc" 207 41 53# "expl:Integer cast"
             (Int32.of_int (0))) !i))
            /\
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 129 28 40#
            (Int32.(<=) !i (select __anonstruct_Graph_4_ecnt_g_0_15 g_0_0))))))
           &&
           ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 130 23 34#
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 130 23 34#
            ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 130 23 29#
             (Int32.(<=) (#"graph_c.jc" 210 41 53# "expl:Integer cast"
             (Int32.of_int (0))) !c))
            /\
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 130 28 34#
            (Int32.(<=) !c !i)))))
           &&
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 131 23 48#
           ((=) (Int32.to_int !c)
           (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
           (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_15
           __anonstruct_Edge_3_existent_0_edges_31
           __anonstruct_Edge_3_to_edges_31 __anonstruct_Edge_3_from_edges_31))))) }
         
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          'LoopCurrent:
          begin
          'LoopCurrent:
          (if
          (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 134 20 31#
          (Unsafe_int32.(<)  !i
           (acc  __anonstruct_Graph_4_ecnt_g_0_15 g_0_0 ) )) then ()
          else (raise (Goto_while_0_break_exc ())));
           begin
           (if
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 12 32#
           (Unsafe_int32.(<>) 
            (acc  __anonstruct_Edge_3_existent_0_edges_31
             (shift_  (acc  __anonstruct_Graph_4_edges_g_0_15 g_0_0 )
              (Unsafe_int32.to_int  !i ) ) )
            (#"graph_c.jc" 224 33 45# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ))
           then
            (if
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 36 57#
            (Unsafe_int32.(=) 
             (acc  __anonstruct_Edge_3_from_edges_31
              (shift_  (acc  __anonstruct_Graph_4_edges_g_0_15 g_0_0 )
               (Unsafe_int32.to_int  !i ) ) ) f_0_0 ))
            then
             (if
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 135 61 80#
             (Unsafe_int32.(=) 
              (acc  __anonstruct_Edge_3_to_edges_31
               (shift_  (acc  __anonstruct_Graph_4_edges_g_0_15 g_0_0 )
                (Unsafe_int32.to_int  !i ) ) ) t_0_0 ))
             then
              (c :=
               (Unsafe_int32.(+)  !c
                (#"graph_c.jc" 237 68 80# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) )) else ()) else ()) else ());
            begin
            (assert {
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 138 19 94#
            "expl:Assertion in line 138"
            ((=)
            (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
            (Int.(+) (Int32.to_int !i) (1)) __anonstruct_Graph_4_edges_g_0_15
            __anonstruct_Edge_3_existent_0_edges_31
            __anonstruct_Edge_3_to_edges_31
            __anonstruct_Edge_3_from_edges_31)
            (Int.(+)
            (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
            (Int32.to_int !i) __anonstruct_Graph_4_edges_g_0_15
            __anonstruct_Edge_3_existent_0_edges_31
            __anonstruct_Edge_3_to_edges_31
            __anonstruct_Edge_3_from_edges_31)
            (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
            (Int32.to_int !i) (Int.(+) (Int32.to_int !i) (1))
            __anonstruct_Graph_4_edges_g_0_15
            __anonstruct_Edge_3_existent_0_edges_31
            __anonstruct_Edge_3_to_edges_31
            __anonstruct_Edge_3_from_edges_31)))) }); () end;
            begin
            (assert {
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 139 19 108#
            "expl:Assertion in line 139"
            ((=)
            (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
            (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_15 g_0_0))
            __anonstruct_Graph_4_edges_g_0_15
            __anonstruct_Edge_3_existent_0_edges_31
            __anonstruct_Edge_3_to_edges_31
            __anonstruct_Edge_3_from_edges_31)
            (Int.(+)
            (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0) (0)
            (Int.(+) (Int32.to_int !i) (1)) __anonstruct_Graph_4_edges_g_0_15
            __anonstruct_Edge_3_existent_0_edges_31
            __anonstruct_Edge_3_to_edges_31
            __anonstruct_Edge_3_from_edges_31)
            (count g_0_0 (Int32.to_int f_0_0) (Int32.to_int t_0_0)
            (Int.(+) (Int32.to_int !i) (1))
            (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_15 g_0_0))
            __anonstruct_Graph_4_edges_g_0_15
            __anonstruct_Edge_3_existent_0_edges_31
            __anonstruct_Edge_3_to_edges_31
            __anonstruct_Edge_3_from_edges_31)))) }); () end end;
           (i :=
            (Unsafe_int32.(+)  !i
             (#"graph_c.jc" 287 53 65# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_3 -> () end end end; (raise (Goto_while_0_break_exc ()))
       end end with Goto_while_0_break_exc _jessie_1 ->
      'While_0_break: 'While_0_break: () end;
     begin (return := !c); (raise Return) end end)); absurd  end with Return
    -> !return end)
  
end

theory Logic_range_existent

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate range_existent (g_4 : (pointer __anonstruct_Graph_4)) (m : int)
  (n_2 : int) (__anonstruct_Graph_4_edges_g_4_7_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_21_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (forall k_4 : int.
      ((((<=) m k_4) /\ ((<) k_4 n_2)) ->
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_21_at_L
       (shift (select __anonstruct_Graph_4_edges_g_4_7_at_L g_4) k_4))) (0)))))
  
  
end

theory Logic_full

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_range_existent 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate full (g_3 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Graph_4_esize_g_3_6_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_3_6_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_50_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (range_existent g_3 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_3_6_at_L g_3))
     __anonstruct_Graph_4_edges_g_3_6_at_L
     __anonstruct_Edge_3_existent_0_edges_50_at_L)
  
  
end

module Function_add_edge_safety
#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 156 0 32#
"expl:add_edge, safety"

  use import core.Upd_safe 
  
  use import core.Upd_offset_safe 
  
  use import core.Tag_table_type 
  
  use import core.Shift_safe 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_range_existent 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_full 
  
  use import Logic_edges_saved 
  
  use import Logic_edge_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use import core.Acc_offset_safe 
  
  use why3.Bool.Bool 
  
  let add_edge #"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 156 0 32#
  "expl:Function add_edge, safety" =
  fun
   (g_10 : (pointer __anonstruct_Graph_4)) (f_2 : Int32.t) (t_2 : Int32.t)
   (__anonstruct_Edge_3_from_edges_33 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_33 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_33 :
   ref (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Graph_4_ecnt_g_16
   : ref (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Edge_3_edges_33_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_16_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_32_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_33_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_32 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_g_16 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_16 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_edges_g_16 : (memory __anonstruct_Graph_4 (pointer
   __anonstruct_Edge_3))) (__anonstruct_Graph_4_esize_g_16 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 145 11 20#
    (#"graph_c.jc" 298 12 751#
    ((#"graph_c.jc" 298 12 751#
     ((<=) (offset_min __anonstruct_Graph_4_g_16_alloc_table g_10) (0)))
    /\
    (#"graph_c.jc" 298 12 751#
    ((#"graph_c.jc" 298 12 751#
     ((>=) (offset_max __anonstruct_Graph_4_g_16_alloc_table g_10) (0)))
    /\ (#"graph_c.jc" 298 12 751# ((=) true true)))))))
   /\
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 145 24 38#
    (graph_valid g_10 __anonstruct_Vertex_2_vertices_32_alloc_table
    __anonstruct_Edge_3_edges_33_alloc_table __anonstruct_Graph_4_esize_g_16
    !__anonstruct_Graph_4_ecnt_g_16 __anonstruct_Graph_4_edges_g_16
    __anonstruct_Graph_4_vsize_g_16 __anonstruct_Graph_4_vertices_g_16
    !__anonstruct_Edge_3_existent_0_edges_33 !__anonstruct_Edge_3_to_edges_33
    !__anonstruct_Edge_3_from_edges_33
    __anonstruct_Vertex_2_existent_vertices_32))
   /\
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 146 11 26#
    (is_vertex g_10 (Int32.to_int f_2) __anonstruct_Graph_4_vsize_g_16))
   /\
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 147 11 26#
    (is_vertex g_10 (Int32.to_int t_2) __anonstruct_Graph_4_vsize_g_16))
   /\
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 148 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_32
    (shift (select __anonstruct_Graph_4_vertices_g_16 g_10)
    (Int32.to_int f_2)))) (0))))
   /\
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 149 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_32
    (shift (select __anonstruct_Graph_4_vertices_g_16 g_10)
    (Int32.to_int t_2)))) (0))))
   /\
   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 150 11 19#
   (not
   (full g_10 __anonstruct_Graph_4_esize_g_16 __anonstruct_Graph_4_edges_g_16
   !__anonstruct_Edge_3_existent_0_edges_33))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let i_0 = ref (Safe_int32.any_  () ) in
    try
     begin
     (if
     (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 158 8 26#
     (Safe_int32.(<) 
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 158 8 15#
      "expl:Pointer dereference"
      (acc  __anonstruct_Graph_4_g_16_alloc_table
       !__anonstruct_Graph_4_ecnt_g_16 g_10 ))
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 158 18 26#
      "expl:Pointer dereference"
      (acc  __anonstruct_Graph_4_g_16_alloc_table
       __anonstruct_Graph_4_esize_g_16 g_10 )) ))
     then
      begin
      (let _jessie_71 =
      (let _jessie_70 = f_2 in
      begin
      (assert {
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 159 8 34#
      "expl:Pointer index bounds" true) }); _jessie_70 end) in
      (let _jessie_72 =
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 159 8 16#
      "expl:Pointer dereference"
      (acc  __anonstruct_Graph_4_g_16_alloc_table
       __anonstruct_Graph_4_edges_g_16 g_10 )) in
      (let _jessie_73 =
      (Safe_int32.to_int 
       (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 159 17 24#
       "expl:Pointer dereference"
       (acc  __anonstruct_Graph_4_g_16_alloc_table
        !__anonstruct_Graph_4_ecnt_g_16 g_10 )) ) in
      (let _jessie_74 = (shift_typesafe  _jessie_72 _jessie_73 ) in
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 159 8 34#
      "expl:Pointer dereference"
      (upd_offset_typesafe  __anonstruct_Edge_3_edges_33_alloc_table
       __anonstruct_Edge_3_from_edges_33 _jessie_72 _jessie_73 _jessie_71 ))))));
       begin
       (let _jessie_66 =
       (let _jessie_65 = t_2 in
       begin
       (assert {
       (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 160 8 32#
       "expl:Pointer index bounds" true) }); _jessie_65 end) in
       (let _jessie_67 =
       (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 160 8 16#
       "expl:Pointer dereference"
       (acc  __anonstruct_Graph_4_g_16_alloc_table
        __anonstruct_Graph_4_edges_g_16 g_10 )) in
       (let _jessie_68 =
       (Safe_int32.to_int 
        (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 160 17 24#
        "expl:Pointer dereference"
        (acc  __anonstruct_Graph_4_g_16_alloc_table
         !__anonstruct_Graph_4_ecnt_g_16 g_10 )) ) in
       (let _jessie_69 = (shift_typesafe  _jessie_67 _jessie_68 ) in
       (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 160 8 32#
       "expl:Pointer dereference"
       (upd_offset_typesafe  __anonstruct_Edge_3_edges_33_alloc_table
        __anonstruct_Edge_3_to_edges_33 _jessie_67 _jessie_68 _jessie_66 ))))));
        begin
        (let _jessie_61 =
        (let _jessie_60 =
        (#"graph_c.jc" 334 91 103# "expl:Integer cast"
        (Safe_int32.of_int (1))) in
        begin
        (assert {
        (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 161 8 38#
        "expl:Pointer index bounds" true) }); _jessie_60 end) in
        (let _jessie_62 =
        (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 161 8 16#
        "expl:Pointer dereference"
        (acc  __anonstruct_Graph_4_g_16_alloc_table
         __anonstruct_Graph_4_edges_g_16 g_10 )) in
        (let _jessie_63 =
        (Safe_int32.to_int 
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 161 17 24#
         "expl:Pointer dereference"
         (acc  __anonstruct_Graph_4_g_16_alloc_table
          !__anonstruct_Graph_4_ecnt_g_16 g_10 )) ) in
        (let _jessie_64 = (shift_typesafe  _jessie_62 _jessie_63 ) in
        (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 161 8 38#
        "expl:Pointer dereference"
        (upd_offset_typesafe  __anonstruct_Edge_3_edges_33_alloc_table
         __anonstruct_Edge_3_existent_0_edges_33 _jessie_62 _jessie_63
         _jessie_61 ))))));
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, g_10 }
         ensures {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 162 19 120#
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 162 19 120#
           ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 162 19 120#
            (edges_saved g_10 (0)
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
            __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
            !__anonstruct_Edge_3_existent_0_edges_33 (at
            !__anonstruct_Edge_3_existent_0_edges_33 'Init)
            !__anonstruct_Edge_3_to_edges_33 (at
            !__anonstruct_Edge_3_to_edges_33 'Init)
            !__anonstruct_Edge_3_from_edges_33 (at
            !__anonstruct_Edge_3_from_edges_33 'Init)))
           /\
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 162 19 120#
           (edges_saved g_10
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
           (Int32.to_int (select __anonstruct_Graph_4_esize_g_16 g_10))
           __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
           !__anonstruct_Edge_3_existent_0_edges_33 (at
           !__anonstruct_Edge_3_existent_0_edges_33 'Init)
           !__anonstruct_Edge_3_to_edges_33 (at
           !__anonstruct_Edge_3_to_edges_33 'Init)
           !__anonstruct_Edge_3_from_edges_33 (at
           !__anonstruct_Edge_3_from_edges_33 'Init)))))) } ; () end;
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, g_10 }
         ensures {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 165 19 41#
           (edge_valid g_10
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
           __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_vsize_g_16
           __anonstruct_Graph_4_vertices_g_16
           !__anonstruct_Edge_3_existent_0_edges_33
           !__anonstruct_Edge_3_to_edges_33
           !__anonstruct_Edge_3_from_edges_33
           __anonstruct_Vertex_2_existent_vertices_32)) } ; () end;
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, f_2, g_10, t_2 }
         ensures {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 166 19 60#
           ((=)
           (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
           __anonstruct_Graph_4_edges_g_16
           !__anonstruct_Edge_3_existent_0_edges_33
           !__anonstruct_Edge_3_to_edges_33
           !__anonstruct_Edge_3_from_edges_33) (1))) } ; () end;
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, g_10 }
         ensures {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 167 19 91#
           (forall f2 : int.
            (forall t2 : int.
             ((=)
             (count g_10 f2 t2
             (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
             (Int.(+)
             (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
             (1)) __anonstruct_Graph_4_edges_g_16 (at
             !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
             !__anonstruct_Edge_3_to_edges_33 'Init) (at
             !__anonstruct_Edge_3_from_edges_33 'Init)) (0))))) } ; () end;
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, f_2, g_10, t_2 }
         ensures {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 168 19 111#
           (forall f2_0 : int.
            (forall t2_0 : int.
             (((not ((=) f2_0 (Int32.to_int f_2))) \/
              (not ((=) t2_0 (Int32.to_int t_2)))) ->
              ((=)
              (count g_10 f2_0 t2_0
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
              (Int.(+)
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
              (1)) __anonstruct_Graph_4_edges_g_16
              !__anonstruct_Edge_3_existent_0_edges_33
              !__anonstruct_Edge_3_to_edges_33
              !__anonstruct_Edge_3_from_edges_33) (0)))))) } ; () end;
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, g_10 }
         ensures {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 169 19 173#
           (forall f2_1 : int.
            (forall t2_1 : int.
             ((count_saved g_10 f2_1 t2_1 (0)
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
              __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
              !__anonstruct_Edge_3_existent_0_edges_33 (at
              !__anonstruct_Edge_3_existent_0_edges_33 'Init)
              !__anonstruct_Edge_3_to_edges_33 (at
              !__anonstruct_Edge_3_to_edges_33 'Init)
              !__anonstruct_Edge_3_from_edges_33 (at
              !__anonstruct_Edge_3_from_edges_33 'Init))
             /\
             (count_saved g_10 f2_1 t2_1
             (Int.(+)
             (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
             (1))
             (Int32.to_int (select __anonstruct_Graph_4_esize_g_16 g_10))
             __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
             !__anonstruct_Edge_3_existent_0_edges_33 (at
             !__anonstruct_Edge_3_existent_0_edges_33 'Init)
             !__anonstruct_Edge_3_to_edges_33 (at
             !__anonstruct_Edge_3_to_edges_33 'Init)
             !__anonstruct_Edge_3_from_edges_33 (at
             !__anonstruct_Edge_3_from_edges_33 'Init)))))) } ; () end;
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, f_2, g_10, t_2 }
         ensures {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 173 19 123#
           (forall f2_2 : int.
            (forall t2_2 : int.
             (((not ((=) f2_2 (Int32.to_int f_2))) \/
              (not ((=) t2_2 (Int32.to_int t_2)))) ->
              (count_saved g_10 f2_2 t2_2
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
              (Int.(+)
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
              (1)) __anonstruct_Graph_4_edges_g_16
              __anonstruct_Graph_4_edges_g_16
              !__anonstruct_Edge_3_existent_0_edges_33 (at
              !__anonstruct_Edge_3_existent_0_edges_33 'Init)
              !__anonstruct_Edge_3_to_edges_33 (at
              !__anonstruct_Edge_3_to_edges_33 'Init)
              !__anonstruct_Edge_3_from_edges_33 (at
              !__anonstruct_Edge_3_from_edges_33 'Init)))))) } ; () end;
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, g_10 }
         ensures {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 174 19 133#
           (forall f2_3 : int.
            (forall t2_3 : int.
             ((=)
             (all_count g_10 f2_3 t2_3 __anonstruct_Graph_4_esize_g_16
             __anonstruct_Graph_4_edges_g_16
             !__anonstruct_Edge_3_existent_0_edges_33
             !__anonstruct_Edge_3_to_edges_33
             !__anonstruct_Edge_3_from_edges_33)
             (Int.(+)
             (all_count g_10 f2_3 t2_3 __anonstruct_Graph_4_esize_g_16
             __anonstruct_Graph_4_edges_g_16 (at
             !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
             !__anonstruct_Edge_3_to_edges_33 'Init) (at
             !__anonstruct_Edge_3_from_edges_33 'Init))
             (count g_10 f2_3 t2_3
             (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
             (Int.(+)
             (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
             (1)) __anonstruct_Graph_4_edges_g_16
             !__anonstruct_Edge_3_existent_0_edges_33
             !__anonstruct_Edge_3_to_edges_33
             !__anonstruct_Edge_3_from_edges_33)))))) } ; () end;
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, f_2, g_10, t_2 }
         ensures {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 175 19 146#
           ((=)
           (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
           __anonstruct_Graph_4_esize_g_16 __anonstruct_Graph_4_edges_g_16
           !__anonstruct_Edge_3_existent_0_edges_33
           !__anonstruct_Edge_3_to_edges_33
           !__anonstruct_Edge_3_from_edges_33)
           (Int.(+)
           (Int.(+)
           (count g_10 (Int32.to_int f_2) (Int32.to_int t_2) (0)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
           __anonstruct_Graph_4_edges_g_16
           !__anonstruct_Edge_3_existent_0_edges_33
           !__anonstruct_Edge_3_to_edges_33
           !__anonstruct_Edge_3_from_edges_33)
           (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
           __anonstruct_Graph_4_edges_g_16
           !__anonstruct_Edge_3_existent_0_edges_33
           !__anonstruct_Edge_3_to_edges_33
           !__anonstruct_Edge_3_from_edges_33))
           (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
           (Int32.to_int (select __anonstruct_Graph_4_esize_g_16 g_10))
           __anonstruct_Graph_4_edges_g_16
           !__anonstruct_Edge_3_existent_0_edges_33
           !__anonstruct_Edge_3_to_edges_33
           !__anonstruct_Edge_3_from_edges_33)))) } ; () end;
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, f_2, g_10, t_2 }
         ensures {
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 176 19 166#
           ((=)
           (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
           __anonstruct_Graph_4_esize_g_16 __anonstruct_Graph_4_edges_g_16
           (at !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
           !__anonstruct_Edge_3_to_edges_33 'Init) (at
           !__anonstruct_Edge_3_from_edges_33 'Init))
           (Int.(+)
           (Int.(+)
           (count g_10 (Int32.to_int f_2) (Int32.to_int t_2) (0)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
           __anonstruct_Graph_4_edges_g_16 (at
           !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
           !__anonstruct_Edge_3_to_edges_33 'Init) (at
           !__anonstruct_Edge_3_from_edges_33 'Init))
           (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
           __anonstruct_Graph_4_edges_g_16 (at
           !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
           !__anonstruct_Edge_3_to_edges_33 'Init) (at
           !__anonstruct_Edge_3_from_edges_33 'Init)))
           (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
           (Int32.to_int (select __anonstruct_Graph_4_esize_g_16 g_10))
           __anonstruct_Graph_4_edges_g_16 (at
           !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
           !__anonstruct_Edge_3_to_edges_33 'Init) (at
           !__anonstruct_Edge_3_from_edges_33 'Init))))) } ; () end;
         begin
         (let _jessie_56 =
         (let _jessie_55 =
         (Safe_int32.(+) 
          (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 177 11 18#
          "expl:Pointer dereference"
          (acc  __anonstruct_Graph_4_g_16_alloc_table
           !__anonstruct_Graph_4_ecnt_g_16 g_10 ))
          (#"graph_c.jc" 486 59 71# "expl:Integer cast"
          (Safe_int32.of_int (1))) ) in
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 177 8 18#
         "expl:Pointer index bounds" true) }); _jessie_55 end) in
         (let _jessie_57 = g_10 in
         (let _jessie_58 = (0) in
         (let _jessie_59 = _jessie_57 in
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 177 8 18#
         "expl:Pointer dereference"
         (upd  __anonstruct_Graph_4_g_16_alloc_table
          __anonstruct_Graph_4_ecnt_g_16 _jessie_57 _jessie_56 ))))));
          (raise (Return_label_exc ())) end end end end else ());
      begin
      any unit
      requires { true } reads { __anonstruct_Graph_4_ecnt_g_16, g_10 }
      ensures {
        (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 181 15 34#
        (Int32.(=) (select __anonstruct_Graph_4_esize_g_16 g_10)
        (select !__anonstruct_Graph_4_ecnt_g_16 g_10))) } ; () end;
      try
       begin
       (i_0 :=
        (let _jessie_91 =
        (#"graph_c.jc" 496 25 37# "expl:Integer cast"
        (Safe_int32.of_int (0))) in
        begin
        (assert {
        (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 189 13 14#
        "expl:Pointer index bounds" true) }); _jessie_91 end));
        'LoopEntry:
        begin
        'LoopEntry:
        'Loop_4:
        loop
        invariant { (#"graph_c.jc" 498 9 13262# true) }
          variant {
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 187 21 32#
            (Int.(-)
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
            (Int32.to_int !i_0))) }
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33,
         __anonstruct_Edge_3_from_edges_33, __anonstruct_Edge_3_to_edges_33,
         __anonstruct_Graph_4_ecnt_g_16, g_10 }
         ensures {
           ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 186 23 46#
            (range_existent g_10 (0) (Int32.to_int !i_0)
            __anonstruct_Graph_4_edges_g_16
            !__anonstruct_Edge_3_existent_0_edges_33))
           /\
           ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 185 23 102#
            (forall f2_10 : int.
             (forall t2_10 : int.
              ((=)
              (all_count g_10 f2_10 t2_10 __anonstruct_Graph_4_esize_g_16
              __anonstruct_Graph_4_edges_g_16 (at
              !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
              !__anonstruct_Edge_3_to_edges_33 'Init) (at
              !__anonstruct_Edge_3_from_edges_33 'Init))
              (all_count g_10 f2_10 t2_10 __anonstruct_Graph_4_esize_g_16
              __anonstruct_Graph_4_edges_g_16
              !__anonstruct_Edge_3_existent_0_edges_33
              !__anonstruct_Edge_3_to_edges_33
              !__anonstruct_Edge_3_from_edges_33)))))
           /\
           ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 184 23 60#
            (edges_saved g_10 (0)
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
            __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
            !__anonstruct_Edge_3_existent_0_edges_33 (at
            !__anonstruct_Edge_3_existent_0_edges_33 'Init)
            !__anonstruct_Edge_3_to_edges_33 (at
            !__anonstruct_Edge_3_to_edges_33 'Init)
            !__anonstruct_Edge_3_from_edges_33 (at
            !__anonstruct_Edge_3_from_edges_33 'Init)))
           /\
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 183 23 40#
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 183 23 40#
           ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 183 23 29#
            (Int32.(<=) (#"graph_c.jc" 500 41 53# "expl:Integer cast"
            (Int32.of_int (0))) !i_0))
           /\
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 183 28 40#
           (Int32.(<=) !i_0 (select !__anonstruct_Graph_4_ecnt_g_16 g_10)))))))))
           } ;
          try
           begin
           'LoopCurrent:
           begin
           'LoopCurrent:
           (if
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 189 20 31#
           (Safe_int32.(<)  !i_0
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 189 24 31#
            "expl:Pointer dereference"
            (acc  __anonstruct_Graph_4_g_16_alloc_table
             !__anonstruct_Graph_4_ecnt_g_16 g_10 )) )) then ()
           else (raise (Goto_while_0_break_0_exc ())));
            'U__L:
            begin
            'U__L: ();
             (if
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 191 12 33#
             (Bool.notb 
              (Safe_int32.(<>) 
               (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 191 13 33#
               "expl:Pointer dereference"
               (acc_offset_typesafe  __anonstruct_Edge_3_edges_33_alloc_table
                !__anonstruct_Edge_3_existent_0_edges_33
                (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 191 13 21#
                "expl:Pointer dereference"
                (acc  __anonstruct_Graph_4_g_16_alloc_table
                 __anonstruct_Graph_4_edges_g_16 g_10 ))
                (Safe_int32.to_int  !i_0 ) ))
               (#"graph_c.jc" 521 37 49# "expl:Integer cast"
               (Safe_int32.of_int (0))) ) ))
             then
              begin
              (let _jessie_86 =
              (let _jessie_85 = f_2 in
              begin
              (assert {
              (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 192 12 32#
              "expl:Pointer index bounds" true) }); _jessie_85 end) in
              (let _jessie_87 =
              (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 192 12 20#
              "expl:Pointer dereference"
              (acc  __anonstruct_Graph_4_g_16_alloc_table
               __anonstruct_Graph_4_edges_g_16 g_10 )) in
              (let _jessie_88 = (Safe_int32.to_int  !i_0 ) in
              (let _jessie_89 = (shift_typesafe  _jessie_87 _jessie_88 ) in
              (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 192 12 32#
              "expl:Pointer dereference"
              (upd_offset_typesafe  __anonstruct_Edge_3_edges_33_alloc_table
               __anonstruct_Edge_3_from_edges_33 _jessie_87 _jessie_88
               _jessie_86 ))))));
               begin
               (let _jessie_81 =
               (let _jessie_80 = t_2 in
               begin
               (assert {
               (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 193 12 30#
               "expl:Pointer index bounds" true) }); _jessie_80 end) in
               (let _jessie_82 =
               (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 193 12 20#
               "expl:Pointer dereference"
               (acc  __anonstruct_Graph_4_g_16_alloc_table
                __anonstruct_Graph_4_edges_g_16 g_10 )) in
               (let _jessie_83 = (Safe_int32.to_int  !i_0 ) in
               (let _jessie_84 = (shift_typesafe  _jessie_82 _jessie_83 ) in
               (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 193 12 30#
               "expl:Pointer dereference"
               (upd_offset_typesafe  __anonstruct_Edge_3_edges_33_alloc_table
                __anonstruct_Edge_3_to_edges_33 _jessie_82 _jessie_83
                _jessie_81 ))))));
                begin
                (let _jessie_76 =
                (let _jessie_75 =
                (#"graph_c.jc" 524 92 104# "expl:Integer cast"
                (Safe_int32.of_int (1))) in
                begin
                (assert {
                (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 194 12 36#
                "expl:Pointer index bounds" true) }); _jessie_75 end) in
                (let _jessie_77 =
                (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 194 12 20#
                "expl:Pointer dereference"
                (acc  __anonstruct_Graph_4_g_16_alloc_table
                 __anonstruct_Graph_4_edges_g_16 g_10 )) in
                (let _jessie_78 = (Safe_int32.to_int  !i_0 ) in
                (let _jessie_79 = (shift_typesafe  _jessie_77 _jessie_78 ) in
                (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 194 12 36#
                "expl:Pointer dereference"
                (upd_offset_typesafe 
                 __anonstruct_Edge_3_edges_33_alloc_table
                 __anonstruct_Edge_3_existent_0_edges_33 _jessie_77
                 _jessie_78 _jessie_76 ))))));
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_33,
                 __anonstruct_Edge_3_from_edges_33,
                 __anonstruct_Edge_3_to_edges_33, g_10 }
                 ensures {
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 195 23 116#
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 195 23 116#
                   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 195 23 116#
                    (edges_saved g_10 (0) (Int32.to_int !i_0)
                    __anonstruct_Graph_4_edges_g_16
                    __anonstruct_Graph_4_edges_g_16
                    !__anonstruct_Edge_3_existent_0_edges_33 (at
                    !__anonstruct_Edge_3_existent_0_edges_33 'Init)
                    !__anonstruct_Edge_3_to_edges_33 (at
                    !__anonstruct_Edge_3_to_edges_33 'Init)
                    !__anonstruct_Edge_3_from_edges_33 (at
                    !__anonstruct_Edge_3_from_edges_33 'Init)))
                   /\
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 195 23 116#
                   (edges_saved g_10 (Int.(+) (Int32.to_int !i_0) (1))
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_16 g_10))
                   __anonstruct_Graph_4_edges_g_16
                   __anonstruct_Graph_4_edges_g_16
                   !__anonstruct_Edge_3_existent_0_edges_33 (at
                   !__anonstruct_Edge_3_existent_0_edges_33 'Init)
                   !__anonstruct_Edge_3_to_edges_33 (at
                   !__anonstruct_Edge_3_to_edges_33 'Init)
                   !__anonstruct_Edge_3_from_edges_33 (at
                   !__anonstruct_Edge_3_from_edges_33 'Init)))))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_33,
                 __anonstruct_Edge_3_from_edges_33,
                 __anonstruct_Edge_3_to_edges_33, g_10 }
                 ensures {
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 198 23 39#
                   (edge_valid g_10 (Int32.to_int !i_0)
                   __anonstruct_Graph_4_edges_g_16
                   __anonstruct_Graph_4_vsize_g_16
                   __anonstruct_Graph_4_vertices_g_16
                   !__anonstruct_Edge_3_existent_0_edges_33
                   !__anonstruct_Edge_3_to_edges_33
                   !__anonstruct_Edge_3_from_edges_33
                   __anonstruct_Vertex_2_existent_vertices_32)) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_33,
                 __anonstruct_Edge_3_from_edges_33,
                 __anonstruct_Edge_3_to_edges_33, f_2, g_10, t_2 }
                 ensures {
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 199 23 52#
                   ((=)
                   (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                   (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_16
                   !__anonstruct_Edge_3_existent_0_edges_33
                   !__anonstruct_Edge_3_to_edges_33
                   !__anonstruct_Edge_3_from_edges_33) (1))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_33,
                 __anonstruct_Edge_3_from_edges_33,
                 __anonstruct_Edge_3_to_edges_33, g_10 }
                 ensures {
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 200 23 83#
                   (forall f2_4 : int.
                    (forall t2_4 : int.
                     ((=)
                     (count g_10 f2_4 t2_4 (Int32.to_int !i_0)
                     (Int.(+) (Int32.to_int !i_0) (1))
                     __anonstruct_Graph_4_edges_g_16 (at
                     !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
                     !__anonstruct_Edge_3_to_edges_33 'Init) (at
                     !__anonstruct_Edge_3_from_edges_33 'Init)) (0))))) } ;
                  () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_33,
                 __anonstruct_Edge_3_from_edges_33,
                 __anonstruct_Edge_3_to_edges_33, f_2, g_10, t_2 }
                 ensures {
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 201 23 103#
                   (forall f2_5 : int.
                    (forall t2_5 : int.
                     (((not ((=) f2_5 (Int32.to_int f_2))) \/
                      (not ((=) t2_5 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_10 f2_5 t2_5 (Int32.to_int !i_0)
                      (Int.(+) (Int32.to_int !i_0) (1))
                      __anonstruct_Graph_4_edges_g_16
                      !__anonstruct_Edge_3_existent_0_edges_33
                      !__anonstruct_Edge_3_to_edges_33
                      !__anonstruct_Edge_3_from_edges_33) (0)))))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_33,
                 __anonstruct_Edge_3_from_edges_33,
                 __anonstruct_Edge_3_to_edges_33, g_10 }
                 ensures {
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 202 23 173#
                   (forall f2_6 : int.
                    (forall t2_6 : int.
                     ((count_saved g_10 f2_6 t2_6 (0) (Int32.to_int !i_0)
                      __anonstruct_Graph_4_edges_g_16
                      __anonstruct_Graph_4_edges_g_16
                      !__anonstruct_Edge_3_existent_0_edges_33 (at
                      !__anonstruct_Edge_3_existent_0_edges_33 'Init)
                      !__anonstruct_Edge_3_to_edges_33 (at
                      !__anonstruct_Edge_3_to_edges_33 'Init)
                      !__anonstruct_Edge_3_from_edges_33 (at
                      !__anonstruct_Edge_3_from_edges_33 'Init))
                     /\
                     (count_saved g_10 f2_6 t2_6
                     (Int.(+) (Int32.to_int !i_0) (1))
                     (Int32.to_int
                     (select __anonstruct_Graph_4_esize_g_16 g_10))
                     __anonstruct_Graph_4_edges_g_16
                     __anonstruct_Graph_4_edges_g_16
                     !__anonstruct_Edge_3_existent_0_edges_33 (at
                     !__anonstruct_Edge_3_existent_0_edges_33 'Init)
                     !__anonstruct_Edge_3_to_edges_33 (at
                     !__anonstruct_Edge_3_to_edges_33 'Init)
                     !__anonstruct_Edge_3_from_edges_33 (at
                     !__anonstruct_Edge_3_from_edges_33 'Init)))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_33,
                 __anonstruct_Edge_3_from_edges_33,
                 __anonstruct_Edge_3_to_edges_33, f_2, g_10, t_2 }
                 ensures {
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 206 23 115#
                   (forall f2_7 : int.
                    (forall t2_7 : int.
                     (((not ((=) f2_7 (Int32.to_int f_2))) \/
                      (not ((=) t2_7 (Int32.to_int t_2)))) ->
                      (count_saved g_10 f2_7 t2_7 (Int32.to_int !i_0)
                      (Int.(+) (Int32.to_int !i_0) (1))
                      __anonstruct_Graph_4_edges_g_16
                      __anonstruct_Graph_4_edges_g_16
                      !__anonstruct_Edge_3_existent_0_edges_33 (at
                      !__anonstruct_Edge_3_existent_0_edges_33 'Init)
                      !__anonstruct_Edge_3_to_edges_33 (at
                      !__anonstruct_Edge_3_to_edges_33 'Init)
                      !__anonstruct_Edge_3_from_edges_33 (at
                      !__anonstruct_Edge_3_from_edges_33 'Init)))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_33,
                 __anonstruct_Edge_3_from_edges_33,
                 __anonstruct_Edge_3_to_edges_33, g_10 }
                 ensures {
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 207 23 158#
                   (forall f2_8 : int.
                    (forall t2_8 : int.
                     ((=)
                     (all_count g_10 f2_8 t2_8
                     __anonstruct_Graph_4_esize_g_16
                     __anonstruct_Graph_4_edges_g_16
                     !__anonstruct_Edge_3_existent_0_edges_33
                     !__anonstruct_Edge_3_to_edges_33
                     !__anonstruct_Edge_3_from_edges_33)
                     (Int.(+)
                     (Int.(+)
                     (count g_10 f2_8 t2_8 (0) (Int32.to_int !i_0)
                     __anonstruct_Graph_4_edges_g_16
                     !__anonstruct_Edge_3_existent_0_edges_33
                     !__anonstruct_Edge_3_to_edges_33
                     !__anonstruct_Edge_3_from_edges_33)
                     (count g_10 f2_8 t2_8 (Int32.to_int !i_0)
                     (Int.(+) (Int32.to_int !i_0) (1))
                     __anonstruct_Graph_4_edges_g_16
                     !__anonstruct_Edge_3_existent_0_edges_33
                     !__anonstruct_Edge_3_to_edges_33
                     !__anonstruct_Edge_3_from_edges_33))
                     (count g_10 f2_8 t2_8 (Int.(+) (Int32.to_int !i_0) (1))
                     (Int32.to_int
                     (select __anonstruct_Graph_4_esize_g_16 g_10))
                     __anonstruct_Graph_4_edges_g_16
                     !__anonstruct_Edge_3_existent_0_edges_33
                     !__anonstruct_Edge_3_to_edges_33
                     !__anonstruct_Edge_3_from_edges_33)))))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_33,
                 __anonstruct_Edge_3_from_edges_33,
                 __anonstruct_Edge_3_to_edges_33, f_2, g_10, t_2 }
                 ensures {
                   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 209 23 146#
                   ((=)
                   (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                   __anonstruct_Graph_4_esize_g_16
                   __anonstruct_Graph_4_edges_g_16 (at
                   !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
                   !__anonstruct_Edge_3_to_edges_33 'Init) (at
                   !__anonstruct_Edge_3_from_edges_33 'Init))
                   (Int.(+)
                   (Int.(+)
                   (count g_10 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                   (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_16 (at
                   !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
                   !__anonstruct_Edge_3_to_edges_33 'Init) (at
                   !__anonstruct_Edge_3_from_edges_33 'Init))
                   (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                   (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_16 (at
                   !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
                   !__anonstruct_Edge_3_to_edges_33 'Init) (at
                   !__anonstruct_Edge_3_from_edges_33 'Init)))
                   (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                   (Int.(+) (Int32.to_int !i_0) (1))
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_16 g_10))
                   __anonstruct_Graph_4_edges_g_16 (at
                   !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
                   !__anonstruct_Edge_3_to_edges_33 'Init) (at
                   !__anonstruct_Edge_3_from_edges_33 'Init))))) } ; () end;
                 (raise (Return_label_exc ())) end end end else ());
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_33,
             __anonstruct_Edge_3_from_edges_33,
             __anonstruct_Edge_3_to_edges_33, __anonstruct_Graph_4_ecnt_g_16,
             g_10 }
             ensures {
               (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 212 19 54#
               (edges_saved g_10 (0)
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
               __anonstruct_Graph_4_edges_g_16
               __anonstruct_Graph_4_edges_g_16
               !__anonstruct_Edge_3_existent_0_edges_33 (at
               !__anonstruct_Edge_3_existent_0_edges_33 'U__L)
               !__anonstruct_Edge_3_to_edges_33 (at
               !__anonstruct_Edge_3_to_edges_33 'U__L)
               !__anonstruct_Edge_3_from_edges_33 (at
               !__anonstruct_Edge_3_from_edges_33 'U__L))) } ; () end;
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_33,
             __anonstruct_Edge_3_from_edges_33,
             __anonstruct_Edge_3_to_edges_33, g_10 }
             ensures {
               (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 213 19 96#
               (forall f2_9 : int.
                (forall t2_9 : int.
                 ((=)
                 (all_count g_10 f2_9 t2_9 __anonstruct_Graph_4_esize_g_16
                 __anonstruct_Graph_4_edges_g_16 (at
                 !__anonstruct_Edge_3_existent_0_edges_33 'U__L) (at
                 !__anonstruct_Edge_3_to_edges_33 'U__L) (at
                 !__anonstruct_Edge_3_from_edges_33 'U__L))
                 (all_count g_10 f2_9 t2_9 __anonstruct_Graph_4_esize_g_16
                 __anonstruct_Graph_4_edges_g_16
                 !__anonstruct_Edge_3_existent_0_edges_33
                 !__anonstruct_Edge_3_to_edges_33
                 !__anonstruct_Edge_3_from_edges_33))))) } ; () end end;
            (i_0 :=
             (let _jessie_90 =
             (Safe_int32.(+)  !i_0
              (#"graph_c.jc" 702 60 72# "expl:Integer cast"
              (Safe_int32.of_int (1))) ) in
             begin
             (assert {
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 189 33 36#
             "expl:Pointer index bounds" true) }); _jessie_90 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_7 -> () end end end; (raise (Goto_while_0_break_0_exc ()))
        end end with Goto_while_0_break_0_exc _jessie_4 ->
       'While_0_break_0: 'While_0_break_0: () end;
      begin
      any unit
      requires { true } reads { __anonstruct_Edge_3_existent_0_edges_33, g_10
      }
      ensures {
        (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 215 15 22#
        (full g_10 __anonstruct_Graph_4_esize_g_16
        __anonstruct_Graph_4_edges_g_16
        !__anonstruct_Edge_3_existent_0_edges_33)) } ; () end;
      (raise (Return_label_exc ())) end with Return_label_exc _jessie_5 ->
     'Return_label: 'Return_label: (raise Return) end); (raise Return) end
    with Return -> () end
  
end

module Function_add_edge_behaviors
#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 156 0 32#
"expl:add_edge, behaviors"

  use import core.Upd_unsafe 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_range_existent 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_full 
  
  use import Logic_edges_saved 
  
  use import Logic_edge_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let add_edge_ensures_default
  #"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 156 0 32#
  "expl:Function add_edge, default behavior" =
  fun
   (g_10 : (pointer __anonstruct_Graph_4)) (f_2 : Int32.t) (t_2 : Int32.t)
   (__anonstruct_Edge_3_from_edges_33 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_33 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_33 :
   ref (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Graph_4_ecnt_g_16
   : ref (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Edge_3_edges_33_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_16_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_32_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_33_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_32 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_g_16 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_16 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_edges_g_16 : (memory __anonstruct_Graph_4 (pointer
   __anonstruct_Edge_3))) (__anonstruct_Graph_4_esize_g_16 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 145 11 20#
    (#"graph_c.jc" 298 12 751#
    ((#"graph_c.jc" 298 12 751#
     ((<=) (offset_min __anonstruct_Graph_4_g_16_alloc_table g_10) (0)))
    /\
    (#"graph_c.jc" 298 12 751#
    ((#"graph_c.jc" 298 12 751#
     ((>=) (offset_max __anonstruct_Graph_4_g_16_alloc_table g_10) (0)))
    /\ (#"graph_c.jc" 298 12 751# ((=) true true)))))))
   /\
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 145 24 38#
    (graph_valid g_10 __anonstruct_Vertex_2_vertices_32_alloc_table
    __anonstruct_Edge_3_edges_33_alloc_table __anonstruct_Graph_4_esize_g_16
    !__anonstruct_Graph_4_ecnt_g_16 __anonstruct_Graph_4_edges_g_16
    __anonstruct_Graph_4_vsize_g_16 __anonstruct_Graph_4_vertices_g_16
    !__anonstruct_Edge_3_existent_0_edges_33 !__anonstruct_Edge_3_to_edges_33
    !__anonstruct_Edge_3_from_edges_33
    __anonstruct_Vertex_2_existent_vertices_32))
   /\
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 146 11 26#
    (is_vertex g_10 (Int32.to_int f_2) __anonstruct_Graph_4_vsize_g_16))
   /\
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 147 11 26#
    (is_vertex g_10 (Int32.to_int t_2) __anonstruct_Graph_4_vsize_g_16))
   /\
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 148 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_32
    (shift (select __anonstruct_Graph_4_vertices_g_16 g_10)
    (Int32.to_int f_2)))) (0))))
   /\
   (#"graph_c.jc" 298 12 751#
   ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 149 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_32
    (shift (select __anonstruct_Graph_4_vertices_g_16 g_10)
    (Int32.to_int t_2)))) (0))))
   /\
   (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 150 11 19#
   (not
   (full g_10 __anonstruct_Graph_4_esize_g_16 __anonstruct_Graph_4_edges_g_16
   !__anonstruct_Edge_3_existent_0_edges_33))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
     "expl:Ensures clause"
     (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
     "expl:Ensures clause"
     ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
      "expl:Ensures clause"
      (graph_valid g_10 __anonstruct_Vertex_2_vertices_32_alloc_table
      __anonstruct_Edge_3_edges_33_alloc_table
      __anonstruct_Graph_4_esize_g_16 !__anonstruct_Graph_4_ecnt_g_16
      __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_vsize_g_16
      __anonstruct_Graph_4_vertices_g_16
      !__anonstruct_Edge_3_existent_0_edges_33
      !__anonstruct_Edge_3_to_edges_33 !__anonstruct_Edge_3_from_edges_33
      __anonstruct_Vertex_2_existent_vertices_32))
     /\
     (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
     "expl:Ensures clause"
     ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 152 10 59#
      "expl:Ensures clause"
      ((=)
      (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
      __anonstruct_Graph_4_esize_g_16 __anonstruct_Graph_4_edges_g_16
      !__anonstruct_Edge_3_existent_0_edges_33
      !__anonstruct_Edge_3_to_edges_33 !__anonstruct_Edge_3_from_edges_33)
      (Int.(+)
      (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
      __anonstruct_Graph_4_esize_g_16 __anonstruct_Graph_4_edges_g_16 (old
      !__anonstruct_Edge_3_existent_0_edges_33) (old
      !__anonstruct_Edge_3_to_edges_33) (old
      !__anonstruct_Edge_3_from_edges_33)) (1))))
     /\
     (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 153 10 108#
     "expl:Ensures clause"
     (forall f2_11 : int.
      (forall t2_11 : int.
       (((not ((=) f2_11 (Int32.to_int f_2))) \/
        (not ((=) t2_11 (Int32.to_int t_2)))) ->
        ((=)
        (all_count g_10 f2_11 t2_11 __anonstruct_Graph_4_esize_g_16
        __anonstruct_Graph_4_edges_g_16
        !__anonstruct_Edge_3_existent_0_edges_33
        !__anonstruct_Edge_3_to_edges_33 !__anonstruct_Edge_3_from_edges_33)
        (all_count g_10 f2_11 t2_11 __anonstruct_Graph_4_esize_g_16
        __anonstruct_Graph_4_edges_g_16 (old
        !__anonstruct_Edge_3_existent_0_edges_33) (old
        !__anonstruct_Edge_3_to_edges_33) (old
        !__anonstruct_Edge_3_from_edges_33))))))))))))) } diverges  ->
   'Init:
   try
    begin
    (let i_0 = ref (Unsafe_int32.any_  () ) in
    try
     begin
     (if
     (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 158 8 26#
     (Unsafe_int32.(<)  (acc  !__anonstruct_Graph_4_ecnt_g_16 g_10 )
      (acc  __anonstruct_Graph_4_esize_g_16 g_10 ) ))
     then
      begin
      (let _jessie_34 = f_2 in
      (let _jessie_35 = (acc  __anonstruct_Graph_4_edges_g_16 g_10 ) in
      (let _jessie_36 =
      (Unsafe_int32.to_int  (acc  !__anonstruct_Graph_4_ecnt_g_16 g_10 ) ) in
      (let _jessie_37 = (shift_  _jessie_35 _jessie_36 ) in
      (upd  __anonstruct_Edge_3_from_edges_33 _jessie_37 _jessie_34 )))));
       begin
       (let _jessie_29 = t_2 in
       (let _jessie_30 = (acc  __anonstruct_Graph_4_edges_g_16 g_10 ) in
       (let _jessie_31 =
       (Unsafe_int32.to_int  (acc  !__anonstruct_Graph_4_ecnt_g_16 g_10 ) )
       in
       (let _jessie_32 = (shift_  _jessie_30 _jessie_31 ) in
       (upd  __anonstruct_Edge_3_to_edges_33 _jessie_32 _jessie_29 )))));
        begin
        (let _jessie_24 =
        (#"graph_c.jc" 334 91 103# "expl:Integer cast"
        (Unsafe_int32.of_int (1))) in
        (let _jessie_25 = (acc  __anonstruct_Graph_4_edges_g_16 g_10 ) in
        (let _jessie_26 =
        (Unsafe_int32.to_int  (acc  !__anonstruct_Graph_4_ecnt_g_16 g_10 ) )
        in
        (let _jessie_27 = (shift_  _jessie_25 _jessie_26 ) in
        (upd  __anonstruct_Edge_3_existent_0_edges_33 _jessie_27 _jessie_24 )))));
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 162 19 120#
         "expl:Assertion in line 162"
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 162 19 120#
         "expl:Assertion in line 162"
         ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 162 19 120#
          "expl:Assertion in line 162"
          (edges_saved g_10 (0)
          (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
          __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
          !__anonstruct_Edge_3_existent_0_edges_33 (at
          !__anonstruct_Edge_3_existent_0_edges_33 'Init)
          !__anonstruct_Edge_3_to_edges_33 (at
          !__anonstruct_Edge_3_to_edges_33 'Init)
          !__anonstruct_Edge_3_from_edges_33 (at
          !__anonstruct_Edge_3_from_edges_33 'Init)))
         /\
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 162 19 120#
         "expl:Assertion in line 162"
         (edges_saved g_10
         (Int.(+)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_16 g_10))
         __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
         !__anonstruct_Edge_3_existent_0_edges_33 (at
         !__anonstruct_Edge_3_existent_0_edges_33 'Init)
         !__anonstruct_Edge_3_to_edges_33 (at
         !__anonstruct_Edge_3_to_edges_33 'Init)
         !__anonstruct_Edge_3_from_edges_33 (at
         !__anonstruct_Edge_3_from_edges_33 'Init)))))) }); () end;
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 165 19 41#
         "expl:Assertion in line 165"
         (edge_valid g_10
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
         __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_vsize_g_16
         __anonstruct_Graph_4_vertices_g_16
         !__anonstruct_Edge_3_existent_0_edges_33
         !__anonstruct_Edge_3_to_edges_33 !__anonstruct_Edge_3_from_edges_33
         __anonstruct_Vertex_2_existent_vertices_32)) }); () end;
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 166 19 60#
         "expl:Assertion in line 166"
         ((=)
         (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
         (Int.(+)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
         __anonstruct_Graph_4_edges_g_16
         !__anonstruct_Edge_3_existent_0_edges_33
         !__anonstruct_Edge_3_to_edges_33 !__anonstruct_Edge_3_from_edges_33)
         (1))) }); () end;
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 167 19 91#
         "expl:Assertion in line 167"
         (forall f2 : int.
          (forall t2 : int.
           ((=)
           (count g_10 f2 t2
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
           __anonstruct_Graph_4_edges_g_16 (at
           !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
           !__anonstruct_Edge_3_to_edges_33 'Init) (at
           !__anonstruct_Edge_3_from_edges_33 'Init)) (0))))) }); () end;
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 168 19 111#
         "expl:Assertion in line 168"
         (forall f2_0 : int.
          (forall t2_0 : int.
           (((not ((=) f2_0 (Int32.to_int f_2))) \/
            (not ((=) t2_0 (Int32.to_int t_2)))) ->
            ((=)
            (count g_10 f2_0 t2_0
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
            (Int.(+)
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
            __anonstruct_Graph_4_edges_g_16
            !__anonstruct_Edge_3_existent_0_edges_33
            !__anonstruct_Edge_3_to_edges_33
            !__anonstruct_Edge_3_from_edges_33) (0)))))) }); () end;
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 169 19 173#
         "expl:Assertion in line 169"
         (forall f2_1 : int.
          (forall t2_1 : int.
           ((count_saved g_10 f2_1 t2_1 (0)
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
            __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
            !__anonstruct_Edge_3_existent_0_edges_33 (at
            !__anonstruct_Edge_3_existent_0_edges_33 'Init)
            !__anonstruct_Edge_3_to_edges_33 (at
            !__anonstruct_Edge_3_to_edges_33 'Init)
            !__anonstruct_Edge_3_from_edges_33 (at
            !__anonstruct_Edge_3_from_edges_33 'Init))
           /\
           (count_saved g_10 f2_1 t2_1
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
           (Int32.to_int (select __anonstruct_Graph_4_esize_g_16 g_10))
           __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
           !__anonstruct_Edge_3_existent_0_edges_33 (at
           !__anonstruct_Edge_3_existent_0_edges_33 'Init)
           !__anonstruct_Edge_3_to_edges_33 (at
           !__anonstruct_Edge_3_to_edges_33 'Init)
           !__anonstruct_Edge_3_from_edges_33 (at
           !__anonstruct_Edge_3_from_edges_33 'Init)))))) }); () end;
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 173 19 123#
         "expl:Assertion in line 173"
         (forall f2_2 : int.
          (forall t2_2 : int.
           (((not ((=) f2_2 (Int32.to_int f_2))) \/
            (not ((=) t2_2 (Int32.to_int t_2)))) ->
            (count_saved g_10 f2_2 t2_2
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
            (Int.(+)
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
            __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
            !__anonstruct_Edge_3_existent_0_edges_33 (at
            !__anonstruct_Edge_3_existent_0_edges_33 'Init)
            !__anonstruct_Edge_3_to_edges_33 (at
            !__anonstruct_Edge_3_to_edges_33 'Init)
            !__anonstruct_Edge_3_from_edges_33 (at
            !__anonstruct_Edge_3_from_edges_33 'Init)))))) }); () end;
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 174 19 133#
         "expl:Assertion in line 174"
         (forall f2_3 : int.
          (forall t2_3 : int.
           ((=)
           (all_count g_10 f2_3 t2_3 __anonstruct_Graph_4_esize_g_16
           __anonstruct_Graph_4_edges_g_16
           !__anonstruct_Edge_3_existent_0_edges_33
           !__anonstruct_Edge_3_to_edges_33
           !__anonstruct_Edge_3_from_edges_33)
           (Int.(+)
           (all_count g_10 f2_3 t2_3 __anonstruct_Graph_4_esize_g_16
           __anonstruct_Graph_4_edges_g_16 (at
           !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
           !__anonstruct_Edge_3_to_edges_33 'Init) (at
           !__anonstruct_Edge_3_from_edges_33 'Init))
           (count g_10 f2_3 t2_3
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
           __anonstruct_Graph_4_edges_g_16
           !__anonstruct_Edge_3_existent_0_edges_33
           !__anonstruct_Edge_3_to_edges_33
           !__anonstruct_Edge_3_from_edges_33)))))) }); () end;
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 175 19 146#
         "expl:Assertion in line 175"
         ((=)
         (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
         __anonstruct_Graph_4_esize_g_16 __anonstruct_Graph_4_edges_g_16
         !__anonstruct_Edge_3_existent_0_edges_33
         !__anonstruct_Edge_3_to_edges_33 !__anonstruct_Edge_3_from_edges_33)
         (Int.(+)
         (Int.(+)
         (count g_10 (Int32.to_int f_2) (Int32.to_int t_2) (0)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
         __anonstruct_Graph_4_edges_g_16
         !__anonstruct_Edge_3_existent_0_edges_33
         !__anonstruct_Edge_3_to_edges_33 !__anonstruct_Edge_3_from_edges_33)
         (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
         (Int.(+)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
         __anonstruct_Graph_4_edges_g_16
         !__anonstruct_Edge_3_existent_0_edges_33
         !__anonstruct_Edge_3_to_edges_33 !__anonstruct_Edge_3_from_edges_33))
         (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
         (Int.(+)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_16 g_10))
         __anonstruct_Graph_4_edges_g_16
         !__anonstruct_Edge_3_existent_0_edges_33
         !__anonstruct_Edge_3_to_edges_33 !__anonstruct_Edge_3_from_edges_33))))
         }); () end;
         begin
         (assert {
         (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 176 19 166#
         "expl:Assertion in line 176"
         ((=)
         (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
         __anonstruct_Graph_4_esize_g_16 __anonstruct_Graph_4_edges_g_16 (at
         !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
         !__anonstruct_Edge_3_to_edges_33 'Init) (at
         !__anonstruct_Edge_3_from_edges_33 'Init))
         (Int.(+)
         (Int.(+)
         (count g_10 (Int32.to_int f_2) (Int32.to_int t_2) (0)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
         __anonstruct_Graph_4_edges_g_16 (at
         !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
         !__anonstruct_Edge_3_to_edges_33 'Init) (at
         !__anonstruct_Edge_3_from_edges_33 'Init))
         (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
         (Int.(+)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
         __anonstruct_Graph_4_edges_g_16 (at
         !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
         !__anonstruct_Edge_3_to_edges_33 'Init) (at
         !__anonstruct_Edge_3_from_edges_33 'Init)))
         (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
         (Int.(+)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10)) (1))
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_16 g_10))
         __anonstruct_Graph_4_edges_g_16 (at
         !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
         !__anonstruct_Edge_3_to_edges_33 'Init) (at
         !__anonstruct_Edge_3_from_edges_33 'Init))))) }); () end;
         begin
         (let _jessie_19 =
         (Unsafe_int32.(+)  (acc  !__anonstruct_Graph_4_ecnt_g_16 g_10 )
          (#"graph_c.jc" 486 59 71# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) in
         (let _jessie_20 = g_10 in
         (let _jessie_21 = (0) in
         (let _jessie_22 = _jessie_20 in
         (upd  __anonstruct_Graph_4_ecnt_g_16 _jessie_22 _jessie_19 )))));
          (raise (Return_label_exc ())) end end end end else ());
      begin
      (assert {
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 181 15 34#
      "expl:Assertion in line 181"
      (Int32.(=) (select __anonstruct_Graph_4_esize_g_16 g_10)
      (select !__anonstruct_Graph_4_ecnt_g_16 g_10))) }); () end;
      try
       begin
       (i_0 :=
        (#"graph_c.jc" 496 25 37# "expl:Integer cast"
        (Unsafe_int32.of_int (0))));
        'LoopEntry:
        begin
        'LoopEntry:
        'Loop_3:
        loop
        invariant
          { ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 183 23 40#
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 183 23 40#
             ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 183 23 29#
              (Int32.(<=) (#"graph_c.jc" 500 41 53# "expl:Integer cast"
              (Int32.of_int (0))) !i_0))
             /\
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 183 28 40#
             (Int32.(<=) !i_0 (select !__anonstruct_Graph_4_ecnt_g_16 g_10))))))
            &&
            ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 184 23 60#
             (edges_saved g_10 (0)
             (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
             __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
             !__anonstruct_Edge_3_existent_0_edges_33 (at
             !__anonstruct_Edge_3_existent_0_edges_33 'Init)
             !__anonstruct_Edge_3_to_edges_33 (at
             !__anonstruct_Edge_3_to_edges_33 'Init)
             !__anonstruct_Edge_3_from_edges_33 (at
             !__anonstruct_Edge_3_from_edges_33 'Init)))
            &&
            ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 185 23 102#
             (forall f2_10 : int.
              (forall t2_10 : int.
               ((=)
               (all_count g_10 f2_10 t2_10 __anonstruct_Graph_4_esize_g_16
               __anonstruct_Graph_4_edges_g_16 (at
               !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
               !__anonstruct_Edge_3_to_edges_33 'Init) (at
               !__anonstruct_Edge_3_from_edges_33 'Init))
               (all_count g_10 f2_10 t2_10 __anonstruct_Graph_4_esize_g_16
               __anonstruct_Graph_4_edges_g_16
               !__anonstruct_Edge_3_existent_0_edges_33
               !__anonstruct_Edge_3_to_edges_33
               !__anonstruct_Edge_3_from_edges_33)))))
            &&
            (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 186 23 46#
            (range_existent g_10 (0) (Int32.to_int !i_0)
            __anonstruct_Graph_4_edges_g_16
            !__anonstruct_Edge_3_existent_0_edges_33))))) } 
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           'LoopCurrent:
           begin
           'LoopCurrent:
           (if
           (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 189 20 31#
           (Unsafe_int32.(<)  !i_0
            (acc  !__anonstruct_Graph_4_ecnt_g_16 g_10 ) )) then ()
           else (raise (Goto_while_0_break_0_exc ())));
            'U__L:
            begin
            'U__L: ();
             (if
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 191 12 33#
             (Bool.notb 
              (Unsafe_int32.(<>) 
               (acc  !__anonstruct_Edge_3_existent_0_edges_33
                (shift_  (acc  __anonstruct_Graph_4_edges_g_16 g_10 )
                 (Unsafe_int32.to_int  !i_0 ) ) )
               (#"graph_c.jc" 521 37 49# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) ) ))
             then
              begin
              (let _jessie_49 = f_2 in
              (let _jessie_50 = (acc  __anonstruct_Graph_4_edges_g_16 g_10 )
              in
              (let _jessie_51 = (Unsafe_int32.to_int  !i_0 ) in
              (let _jessie_52 = (shift_  _jessie_50 _jessie_51 ) in
              (upd  __anonstruct_Edge_3_from_edges_33 _jessie_52 _jessie_49 )))));
               begin
               (let _jessie_44 = t_2 in
               (let _jessie_45 = (acc  __anonstruct_Graph_4_edges_g_16 g_10 )
               in
               (let _jessie_46 = (Unsafe_int32.to_int  !i_0 ) in
               (let _jessie_47 = (shift_  _jessie_45 _jessie_46 ) in
               (upd  __anonstruct_Edge_3_to_edges_33 _jessie_47 _jessie_44 )))));
                begin
                (let _jessie_39 =
                (#"graph_c.jc" 524 92 104# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) in
                (let _jessie_40 =
                (acc  __anonstruct_Graph_4_edges_g_16 g_10 ) in
                (let _jessie_41 = (Unsafe_int32.to_int  !i_0 ) in
                (let _jessie_42 = (shift_  _jessie_40 _jessie_41 ) in
                (upd  __anonstruct_Edge_3_existent_0_edges_33 _jessie_42
                 _jessie_39 )))));
                 begin
                 (assert {
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 195 23 116#
                 "expl:Assertion in line 195"
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 195 23 116#
                 "expl:Assertion in line 195"
                 ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 195 23 116#
                  "expl:Assertion in line 195"
                  (edges_saved g_10 (0) (Int32.to_int !i_0)
                  __anonstruct_Graph_4_edges_g_16
                  __anonstruct_Graph_4_edges_g_16
                  !__anonstruct_Edge_3_existent_0_edges_33 (at
                  !__anonstruct_Edge_3_existent_0_edges_33 'Init)
                  !__anonstruct_Edge_3_to_edges_33 (at
                  !__anonstruct_Edge_3_to_edges_33 'Init)
                  !__anonstruct_Edge_3_from_edges_33 (at
                  !__anonstruct_Edge_3_from_edges_33 'Init)))
                 /\
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 195 23 116#
                 "expl:Assertion in line 195"
                 (edges_saved g_10 (Int.(+) (Int32.to_int !i_0) (1))
                 (Int32.to_int (select __anonstruct_Graph_4_esize_g_16 g_10))
                 __anonstruct_Graph_4_edges_g_16
                 __anonstruct_Graph_4_edges_g_16
                 !__anonstruct_Edge_3_existent_0_edges_33 (at
                 !__anonstruct_Edge_3_existent_0_edges_33 'Init)
                 !__anonstruct_Edge_3_to_edges_33 (at
                 !__anonstruct_Edge_3_to_edges_33 'Init)
                 !__anonstruct_Edge_3_from_edges_33 (at
                 !__anonstruct_Edge_3_from_edges_33 'Init)))))) }); () end;
                 begin
                 (assert {
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 198 23 39#
                 "expl:Assertion in line 198"
                 (edge_valid g_10 (Int32.to_int !i_0)
                 __anonstruct_Graph_4_edges_g_16
                 __anonstruct_Graph_4_vsize_g_16
                 __anonstruct_Graph_4_vertices_g_16
                 !__anonstruct_Edge_3_existent_0_edges_33
                 !__anonstruct_Edge_3_to_edges_33
                 !__anonstruct_Edge_3_from_edges_33
                 __anonstruct_Vertex_2_existent_vertices_32)) }); () end;
                 begin
                 (assert {
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 199 23 52#
                 "expl:Assertion in line 199"
                 ((=)
                 (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                 (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                 __anonstruct_Graph_4_edges_g_16
                 !__anonstruct_Edge_3_existent_0_edges_33
                 !__anonstruct_Edge_3_to_edges_33
                 !__anonstruct_Edge_3_from_edges_33) (1))) }); () end;
                 begin
                 (assert {
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 200 23 83#
                 "expl:Assertion in line 200"
                 (forall f2_4 : int.
                  (forall t2_4 : int.
                   ((=)
                   (count g_10 f2_4 t2_4 (Int32.to_int !i_0)
                   (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_16 (at
                   !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
                   !__anonstruct_Edge_3_to_edges_33 'Init) (at
                   !__anonstruct_Edge_3_from_edges_33 'Init)) (0))))) }); ()
                 end;
                 begin
                 (assert {
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 201 23 103#
                 "expl:Assertion in line 201"
                 (forall f2_5 : int.
                  (forall t2_5 : int.
                   (((not ((=) f2_5 (Int32.to_int f_2))) \/
                    (not ((=) t2_5 (Int32.to_int t_2)))) ->
                    ((=)
                    (count g_10 f2_5 t2_5 (Int32.to_int !i_0)
                    (Int.(+) (Int32.to_int !i_0) (1))
                    __anonstruct_Graph_4_edges_g_16
                    !__anonstruct_Edge_3_existent_0_edges_33
                    !__anonstruct_Edge_3_to_edges_33
                    !__anonstruct_Edge_3_from_edges_33) (0)))))) }); () end;
                 begin
                 (assert {
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 202 23 173#
                 "expl:Assertion in line 202"
                 (forall f2_6 : int.
                  (forall t2_6 : int.
                   ((count_saved g_10 f2_6 t2_6 (0) (Int32.to_int !i_0)
                    __anonstruct_Graph_4_edges_g_16
                    __anonstruct_Graph_4_edges_g_16
                    !__anonstruct_Edge_3_existent_0_edges_33 (at
                    !__anonstruct_Edge_3_existent_0_edges_33 'Init)
                    !__anonstruct_Edge_3_to_edges_33 (at
                    !__anonstruct_Edge_3_to_edges_33 'Init)
                    !__anonstruct_Edge_3_from_edges_33 (at
                    !__anonstruct_Edge_3_from_edges_33 'Init))
                   /\
                   (count_saved g_10 f2_6 t2_6
                   (Int.(+) (Int32.to_int !i_0) (1))
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_16 g_10))
                   __anonstruct_Graph_4_edges_g_16
                   __anonstruct_Graph_4_edges_g_16
                   !__anonstruct_Edge_3_existent_0_edges_33 (at
                   !__anonstruct_Edge_3_existent_0_edges_33 'Init)
                   !__anonstruct_Edge_3_to_edges_33 (at
                   !__anonstruct_Edge_3_to_edges_33 'Init)
                   !__anonstruct_Edge_3_from_edges_33 (at
                   !__anonstruct_Edge_3_from_edges_33 'Init)))))) }); () end;
                 begin
                 (assert {
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 206 23 115#
                 "expl:Assertion in line 206"
                 (forall f2_7 : int.
                  (forall t2_7 : int.
                   (((not ((=) f2_7 (Int32.to_int f_2))) \/
                    (not ((=) t2_7 (Int32.to_int t_2)))) ->
                    (count_saved g_10 f2_7 t2_7 (Int32.to_int !i_0)
                    (Int.(+) (Int32.to_int !i_0) (1))
                    __anonstruct_Graph_4_edges_g_16
                    __anonstruct_Graph_4_edges_g_16
                    !__anonstruct_Edge_3_existent_0_edges_33 (at
                    !__anonstruct_Edge_3_existent_0_edges_33 'Init)
                    !__anonstruct_Edge_3_to_edges_33 (at
                    !__anonstruct_Edge_3_to_edges_33 'Init)
                    !__anonstruct_Edge_3_from_edges_33 (at
                    !__anonstruct_Edge_3_from_edges_33 'Init)))))) }); () end;
                 begin
                 (assert {
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 207 23 158#
                 "expl:Assertion in line 207"
                 (forall f2_8 : int.
                  (forall t2_8 : int.
                   ((=)
                   (all_count g_10 f2_8 t2_8 __anonstruct_Graph_4_esize_g_16
                   __anonstruct_Graph_4_edges_g_16
                   !__anonstruct_Edge_3_existent_0_edges_33
                   !__anonstruct_Edge_3_to_edges_33
                   !__anonstruct_Edge_3_from_edges_33)
                   (Int.(+)
                   (Int.(+)
                   (count g_10 f2_8 t2_8 (0) (Int32.to_int !i_0)
                   __anonstruct_Graph_4_edges_g_16
                   !__anonstruct_Edge_3_existent_0_edges_33
                   !__anonstruct_Edge_3_to_edges_33
                   !__anonstruct_Edge_3_from_edges_33)
                   (count g_10 f2_8 t2_8 (Int32.to_int !i_0)
                   (Int.(+) (Int32.to_int !i_0) (1))
                   __anonstruct_Graph_4_edges_g_16
                   !__anonstruct_Edge_3_existent_0_edges_33
                   !__anonstruct_Edge_3_to_edges_33
                   !__anonstruct_Edge_3_from_edges_33))
                   (count g_10 f2_8 t2_8 (Int.(+) (Int32.to_int !i_0) (1))
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_16 g_10))
                   __anonstruct_Graph_4_edges_g_16
                   !__anonstruct_Edge_3_existent_0_edges_33
                   !__anonstruct_Edge_3_to_edges_33
                   !__anonstruct_Edge_3_from_edges_33)))))) }); () end;
                 begin
                 (assert {
                 (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 209 23 146#
                 "expl:Assertion in line 209"
                 ((=)
                 (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                 __anonstruct_Graph_4_esize_g_16
                 __anonstruct_Graph_4_edges_g_16 (at
                 !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
                 !__anonstruct_Edge_3_to_edges_33 'Init) (at
                 !__anonstruct_Edge_3_from_edges_33 'Init))
                 (Int.(+)
                 (Int.(+)
                 (count g_10 (Int32.to_int f_2) (Int32.to_int t_2) (0)
                 (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_16 (at
                 !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
                 !__anonstruct_Edge_3_to_edges_33 'Init) (at
                 !__anonstruct_Edge_3_from_edges_33 'Init))
                 (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                 (Int32.to_int !i_0) (Int.(+) (Int32.to_int !i_0) (1))
                 __anonstruct_Graph_4_edges_g_16 (at
                 !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
                 !__anonstruct_Edge_3_to_edges_33 'Init) (at
                 !__anonstruct_Edge_3_from_edges_33 'Init)))
                 (count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                 (Int.(+) (Int32.to_int !i_0) (1))
                 (Int32.to_int (select __anonstruct_Graph_4_esize_g_16 g_10))
                 __anonstruct_Graph_4_edges_g_16 (at
                 !__anonstruct_Edge_3_existent_0_edges_33 'Init) (at
                 !__anonstruct_Edge_3_to_edges_33 'Init) (at
                 !__anonstruct_Edge_3_from_edges_33 'Init))))) }); () end;
                 (raise (Return_label_exc ())) end end end else ());
             begin
             (assert {
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 212 19 54#
             "expl:Assertion in line 212"
             (edges_saved g_10 (0)
             (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_16 g_10))
             __anonstruct_Graph_4_edges_g_16 __anonstruct_Graph_4_edges_g_16
             !__anonstruct_Edge_3_existent_0_edges_33 (at
             !__anonstruct_Edge_3_existent_0_edges_33 'U__L)
             !__anonstruct_Edge_3_to_edges_33 (at
             !__anonstruct_Edge_3_to_edges_33 'U__L)
             !__anonstruct_Edge_3_from_edges_33 (at
             !__anonstruct_Edge_3_from_edges_33 'U__L))) }); () end;
             begin
             (assert {
             (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 213 19 96#
             "expl:Assertion in line 213"
             (forall f2_9 : int.
              (forall t2_9 : int.
               ((=)
               (all_count g_10 f2_9 t2_9 __anonstruct_Graph_4_esize_g_16
               __anonstruct_Graph_4_edges_g_16 (at
               !__anonstruct_Edge_3_existent_0_edges_33 'U__L) (at
               !__anonstruct_Edge_3_to_edges_33 'U__L) (at
               !__anonstruct_Edge_3_from_edges_33 'U__L))
               (all_count g_10 f2_9 t2_9 __anonstruct_Graph_4_esize_g_16
               __anonstruct_Graph_4_edges_g_16
               !__anonstruct_Edge_3_existent_0_edges_33
               !__anonstruct_Edge_3_to_edges_33
               !__anonstruct_Edge_3_from_edges_33))))) }); () end end;
            (i_0 :=
             (Unsafe_int32.(+)  !i_0
              (#"graph_c.jc" 702 60 72# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_7 -> () end end end; (raise (Goto_while_0_break_0_exc ()))
        end end with Goto_while_0_break_0_exc _jessie_4 ->
       'While_0_break_0: 'While_0_break_0: () end;
      begin
      (assert {
      (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 215 15 22#
      "expl:Assertion in line 215"
      (full g_10 __anonstruct_Graph_4_esize_g_16
      __anonstruct_Graph_4_edges_g_16
      !__anonstruct_Edge_3_existent_0_edges_33)) }); () end;
      (raise (Return_label_exc ())) end with Return_label_exc _jessie_5 ->
     'Return_label: 'Return_label: (raise Return) end); (raise Return) end
    with Return -> () end
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct___anonstruct_Edge_3

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Edge_3_tag  : (tag_id
  __anonstruct_Edge_3)
  
  axiom U___anonstruct_Edge_3_parenttag_bottom  :
  (parenttag __anonstruct_Edge_3_tag bottom_tag)
  
  axiom U___anonstruct_Edge_3_is_final  :
  (forall __anonstruct_Edge_3_tag_table : (tag_table __anonstruct_Edge_3).
   (forall p : (pointer __anonstruct_Edge_3).
    ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) ->
     ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag))))
  
  predicate frame_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  =
     ((tag_extends old___anonstruct_Edge_3_tag_table
      __anonstruct_Edge_3_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Edge_3_tag_table
     __anonstruct_Edge_3_tag_table p))
  
  predicate frame_free_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3))
  =
     ((free_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (free_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (old___anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  =
     ((alloc_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (alloc_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (tag_fresh __anonstruct_Edge_3_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = (alloc_fresh __anonstruct_Edge_3_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) = true
  
  predicate container_of_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3)) = true
  
  predicate typeof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
  
  predicate typeof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     (((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Edge_3_tag_table (shift p i))
       __anonstruct_Edge_3_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag)
  
  predicate instanceof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Edge_3_tag_table (shift p i)
       __anonstruct_Edge_3_tag))))
  
  predicate right_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (b : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  axiom U___anonstruct_Edge_3_int  :
  ((=) (int_of_tag __anonstruct_Edge_3_tag) (4))
  
end

module Struct___anonstruct_Edge_3_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Edge_3_alloc_table p)) }
    writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3_requires
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { ((>=) n (0)) } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
end

module Struct___anonstruct_Edge_3_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires { true } writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { true } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Edge_3
  (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
    (pointer __anonstruct_Edge_3)
    requires { true } writes { __anonstruct_Edge_3_alloc_table,
    __anonstruct_Edge_3_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Edge_3 result (0) (0)
       !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Edge_3 result (1) (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Edge_3 result (old
       !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Edge_3 result
       !__anonstruct_Edge_3_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Edge_3 result
      !__anonstruct_Edge_3_tag_table))))))) }
  
end

theory Struct___anonstruct_Graph_4

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Graph_4_tag  : (tag_id
  __anonstruct_Graph_4)
  
  axiom U___anonstruct_Graph_4_parenttag_bottom  :
  (parenttag __anonstruct_Graph_4_tag bottom_tag)
  
  axiom U___anonstruct_Graph_4_is_final  :
  (forall __anonstruct_Graph_4_tag_table : (tag_table __anonstruct_Graph_4).
   (forall p : (pointer __anonstruct_Graph_4).
    ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     ->
     ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag))))
  
  predicate frame_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  =
     ((tag_extends old___anonstruct_Graph_4_tag_table
      __anonstruct_Graph_4_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Graph_4_tag_table
     __anonstruct_Graph_4_tag_table p))
  
  predicate frame_free_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4))
  =
     ((free_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (free_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (old___anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  =
     ((alloc_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (alloc_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_tag_table :
  (tag_table __anonstruct_Graph_4))
  = (tag_fresh __anonstruct_Graph_4_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = (alloc_fresh __anonstruct_Graph_4_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) = true
  
  predicate container_of_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4)) = true
  
  predicate typeof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
  
  predicate typeof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     (((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Graph_4_tag_table (shift p i))
       __anonstruct_Graph_4_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = (instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
  
  predicate instanceof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Graph_4_tag_table (shift p i)
       __anonstruct_Graph_4_tag))))
  
  predicate right_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (b : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  axiom U___anonstruct_Graph_4_int  :
  ((=) (int_of_tag __anonstruct_Graph_4_tag) (5))
  
end

module Struct___anonstruct_Graph_4_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Graph_4_alloc_table p)) }
    writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4_requires
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { ((>=) n (0)) } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
end

module Struct___anonstruct_Graph_4_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires { true } writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { true } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Graph_4
  (__anonstruct_Graph_4_alloc_table : ref (alloc_table
   __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
    (pointer __anonstruct_Graph_4)
    requires { true } writes { __anonstruct_Graph_4_alloc_table,
    __anonstruct_Graph_4_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Graph_4 result (0) (0)
       !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Graph_4 result (1) (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Graph_4 result (old
       !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Graph_4 result
       !__anonstruct_Graph_4_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Graph_4 result
      !__anonstruct_Graph_4_tag_table))))))) }
  
end

theory Struct___anonstruct_Vertex_2

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Vertex_2_tag  : (tag_id
  __anonstruct_Vertex_2)
  
  axiom U___anonstruct_Vertex_2_parenttag_bottom  :
  (parenttag __anonstruct_Vertex_2_tag bottom_tag)
  
  axiom U___anonstruct_Vertex_2_is_final  :
  (forall __anonstruct_Vertex_2_tag_table : (tag_table
   __anonstruct_Vertex_2).
   (forall p : (pointer __anonstruct_Vertex_2).
    ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     ->
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag))))
  
  predicate frame_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((tag_extends old___anonstruct_Vertex_2_tag_table
      __anonstruct_Vertex_2_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Vertex_2_tag_table
     __anonstruct_Vertex_2_tag_table p))
  
  predicate frame_free_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((free_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (free_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((alloc_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (alloc_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_tag_table :
  (tag_table __anonstruct_Vertex_2))
  = (tag_fresh __anonstruct_Vertex_2_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = (alloc_fresh __anonstruct_Vertex_2_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) = true
  
  predicate container_of_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  = true
  
  predicate typeof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag)
  
  predicate typeof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     (((=) (typeof __anonstruct_Vertex_2_tag_table p)
      __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Vertex_2_tag_table (shift p i))
       __anonstruct_Vertex_2_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  = (instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
  
  predicate instanceof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Vertex_2_tag_table (shift p i)
       __anonstruct_Vertex_2_tag))))
  
  predicate right_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (b : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  axiom U___anonstruct_Vertex_2_int  :
  ((=) (int_of_tag __anonstruct_Vertex_2_tag) (6))
  
end

module Struct___anonstruct_Vertex_2_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Vertex_2_alloc_table p)) }
    writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2_requires
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { ((>=) n (0)) } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
end

module Struct___anonstruct_Vertex_2_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires { true } writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { true } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Vertex_2
  (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
   __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_tag_table : ref (tag_table
    __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
    requires { true } writes { __anonstruct_Vertex_2_alloc_table,
    __anonstruct_Vertex_2_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Vertex_2 result (0) (0)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Vertex_2 result (1) (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Vertex_2 result (old
       !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Vertex_2 result
       !__anonstruct_Vertex_2_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Vertex_2 result
      !__anonstruct_Vertex_2_tag_table))))))) }
  
end

theory Struct_voidP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate strict_left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Function_count_0

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val count_0
  (g_0_0 : (pointer __anonstruct_Graph_4)) 
   (f_0_0 : Int32.t) 
    (t_0_0 : Int32.t) 
     (__anonstruct_Vertex_2_vertices_30_alloc_table : (alloc_table
      __anonstruct_Vertex_2)) 
      (__anonstruct_Graph_4_g_0_15_alloc_table : (alloc_table
       __anonstruct_Graph_4)) 
       (__anonstruct_Edge_3_edges_31_alloc_table : (alloc_table
        __anonstruct_Edge_3)) 
        (__anonstruct_Edge_3_edges_31_tag_table : (tag_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_0_15 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_0_15 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_0_15 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_0_15 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_0_15 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_31 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_31 : (memory __anonstruct_Edge_3
                Int32.t)) 
                (__anonstruct_Edge_3_from_edges_31 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_30 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : Int32.t
                  requires { true }
                  ensures {
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 122 12 41#
                    "expl:Ensures clause"
                    ((=) (Int32.to_int result)
                    (all_count g_0_0 (Int32.to_int f_0_0)
                    (Int32.to_int t_0_0) __anonstruct_Graph_4_esize_g_0_15
                    __anonstruct_Graph_4_edges_g_0_15
                    __anonstruct_Edge_3_existent_0_edges_31
                    __anonstruct_Edge_3_to_edges_31
                    __anonstruct_Edge_3_from_edges_31))) }
  
end

module Function_count_0_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val count_0
  (g_0_0 : (pointer __anonstruct_Graph_4)) 
   (f_0_0 : Int32.t) 
    (t_0_0 : Int32.t) 
     (__anonstruct_Vertex_2_vertices_30_alloc_table : (alloc_table
      __anonstruct_Vertex_2)) 
      (__anonstruct_Graph_4_g_0_15_alloc_table : (alloc_table
       __anonstruct_Graph_4)) 
       (__anonstruct_Edge_3_edges_31_alloc_table : (alloc_table
        __anonstruct_Edge_3)) 
        (__anonstruct_Edge_3_edges_31_tag_table : (tag_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_0_15 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_0_15 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_0_15 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_0_15 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_0_15 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_31 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_31 : (memory __anonstruct_Edge_3
                Int32.t)) 
                (__anonstruct_Edge_3_from_edges_31 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_30 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : Int32.t
                  requires {
                    ("expl:Internal"
                    (#"graph_c.jc" 180 12 740# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 117 13 22#
                     "expl:Requires clause"
                     (#"graph_c.jc" 180 12 740# "expl:Requires clause"
                     ((#"graph_c.jc" 180 12 740# "expl:Requires clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_0_15_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"graph_c.jc" 180 12 740# "expl:Requires clause"
                     ((#"graph_c.jc" 180 12 740# "expl:Requires clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_0_15_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"graph_c.jc" 180 12 740# "expl:Requires clause"
                     ((=) true true)))))))
                    /\
                    (#"graph_c.jc" 180 12 740# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 117 26 40#
                     "expl:Requires clause"
                     (graph_valid g_0_0
                     __anonstruct_Vertex_2_vertices_30_alloc_table
                     __anonstruct_Edge_3_edges_31_alloc_table
                     __anonstruct_Graph_4_esize_g_0_15
                     __anonstruct_Graph_4_ecnt_g_0_15
                     __anonstruct_Graph_4_edges_g_0_15
                     __anonstruct_Graph_4_vsize_g_0_15
                     __anonstruct_Graph_4_vertices_g_0_15
                     __anonstruct_Edge_3_existent_0_edges_31
                     __anonstruct_Edge_3_to_edges_31
                     __anonstruct_Edge_3_from_edges_31
                     __anonstruct_Vertex_2_existent_vertices_30))
                    /\
                    (#"graph_c.jc" 180 12 740# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 118 13 28#
                     "expl:Requires clause"
                     (is_vertex g_0_0 (Int32.to_int f_0_0)
                     __anonstruct_Graph_4_vsize_g_0_15))
                    /\
                    (#"graph_c.jc" 180 12 740# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 119 13 28#
                     "expl:Requires clause"
                     (is_vertex g_0_0 (Int32.to_int t_0_0)
                     __anonstruct_Graph_4_vsize_g_0_15))
                    /\
                    (#"graph_c.jc" 180 12 740# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 120 13 41#
                     "expl:Requires clause"
                     (Int32.(=)
                     (select __anonstruct_Vertex_2_existent_vertices_30
                     (shift
                     (select __anonstruct_Graph_4_vertices_g_0_15 g_0_0)
                     (Int32.to_int f_0_0))) (#"graph_c.jc" 189 29 41#
                     "expl:Integer cast" (Int32.of_int (1)))))
                    /\
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 121 13 41#
                    "expl:Requires clause"
                    (Int32.(=)
                    (select __anonstruct_Vertex_2_existent_vertices_30
                    (shift
                    (select __anonstruct_Graph_4_vertices_g_0_15 g_0_0)
                    (Int32.to_int t_0_0))) (#"graph_c.jc" 191 30 42#
                    "expl:Integer cast" (Int32.of_int (1)))))))))))))))) }
                  ensures {
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 122 12 41#
                    "expl:Ensures clause"
                    ((=) (Int32.to_int result)
                    (all_count g_0_0 (Int32.to_int f_0_0)
                    (Int32.to_int t_0_0) __anonstruct_Graph_4_esize_g_0_15
                    __anonstruct_Graph_4_edges_g_0_15
                    __anonstruct_Edge_3_existent_0_edges_31
                    __anonstruct_Edge_3_to_edges_31
                    __anonstruct_Edge_3_from_edges_31))) }
  
end

module Function_add_edge

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val add_edge
  (g_10 : (pointer __anonstruct_Graph_4)) 
   (f_2 : Int32.t) 
    (t_2 : Int32.t) 
     (__anonstruct_Graph_4_ecnt_g_16 : ref (memory __anonstruct_Graph_4
      Int32.t)) 
      (__anonstruct_Edge_3_existent_0_edges_33 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_33 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_33 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_32_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_g_16_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_33_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_33_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_g_16 : (memory __anonstruct_Graph_4
              Int32.t)) 
              (__anonstruct_Graph_4_edges_g_16 : (memory __anonstruct_Graph_4
               (pointer __anonstruct_Edge_3))) 
               (__anonstruct_Graph_4_vsize_g_16 : (memory
                __anonstruct_Graph_4 Int32.t)) 
                (__anonstruct_Graph_4_vertices_g_16 : (memory
                 __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                 (__anonstruct_Vertex_2_existent_vertices_32 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires { true } reads {
                  __anonstruct_Edge_3_existent_0_edges_33,
                  __anonstruct_Edge_3_from_edges_33,
                  __anonstruct_Edge_3_to_edges_33,
                  __anonstruct_Graph_4_ecnt_g_16 } writes {
                  __anonstruct_Edge_3_existent_0_edges_33,
                  __anonstruct_Edge_3_from_edges_33,
                  __anonstruct_Edge_3_to_edges_33,
                  __anonstruct_Graph_4_ecnt_g_16 }
                  ensures {
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
                    "expl:Ensures clause"
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
                    "expl:Ensures clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
                     "expl:Ensures clause"
                     (graph_valid g_10
                     __anonstruct_Vertex_2_vertices_32_alloc_table
                     __anonstruct_Edge_3_edges_33_alloc_table
                     __anonstruct_Graph_4_esize_g_16
                     !__anonstruct_Graph_4_ecnt_g_16
                     __anonstruct_Graph_4_edges_g_16
                     __anonstruct_Graph_4_vsize_g_16
                     __anonstruct_Graph_4_vertices_g_16
                     !__anonstruct_Edge_3_existent_0_edges_33
                     !__anonstruct_Edge_3_to_edges_33
                     !__anonstruct_Edge_3_from_edges_33
                     __anonstruct_Vertex_2_existent_vertices_32))
                    /\
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
                    "expl:Ensures clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 152 10 59#
                     "expl:Ensures clause"
                     ((=)
                     (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_16
                     __anonstruct_Graph_4_edges_g_16
                     !__anonstruct_Edge_3_existent_0_edges_33
                     !__anonstruct_Edge_3_to_edges_33
                     !__anonstruct_Edge_3_from_edges_33)
                     (Int.(+)
                     (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_16
                     __anonstruct_Graph_4_edges_g_16 (old
                     !__anonstruct_Edge_3_existent_0_edges_33) (old
                     !__anonstruct_Edge_3_to_edges_33) (old
                     !__anonstruct_Edge_3_from_edges_33)) (1))))
                    /\
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 153 10 108#
                    "expl:Ensures clause"
                    (forall f2_11 : int.
                     (forall t2_11 : int.
                      (((not ((=) f2_11 (Int32.to_int f_2))) \/
                       (not ((=) t2_11 (Int32.to_int t_2)))) ->
                       ((=)
                       (all_count g_10 f2_11 t2_11
                       __anonstruct_Graph_4_esize_g_16
                       __anonstruct_Graph_4_edges_g_16
                       !__anonstruct_Edge_3_existent_0_edges_33
                       !__anonstruct_Edge_3_to_edges_33
                       !__anonstruct_Edge_3_from_edges_33)
                       (all_count g_10 f2_11 t2_11
                       __anonstruct_Graph_4_esize_g_16
                       __anonstruct_Graph_4_edges_g_16 (old
                       !__anonstruct_Edge_3_existent_0_edges_33) (old
                       !__anonstruct_Edge_3_to_edges_33) (old
                       !__anonstruct_Edge_3_from_edges_33)))))))))))) }
  
end

module Function_add_edge_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_full 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val add_edge
  (g_10 : (pointer __anonstruct_Graph_4)) 
   (f_2 : Int32.t) 
    (t_2 : Int32.t) 
     (__anonstruct_Graph_4_ecnt_g_16 : ref (memory __anonstruct_Graph_4
      Int32.t)) 
      (__anonstruct_Edge_3_existent_0_edges_33 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_33 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_33 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_32_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_g_16_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_33_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_33_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_g_16 : (memory __anonstruct_Graph_4
              Int32.t)) 
              (__anonstruct_Graph_4_edges_g_16 : (memory __anonstruct_Graph_4
               (pointer __anonstruct_Edge_3))) 
               (__anonstruct_Graph_4_vsize_g_16 : (memory
                __anonstruct_Graph_4 Int32.t)) 
                (__anonstruct_Graph_4_vertices_g_16 : (memory
                 __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                 (__anonstruct_Vertex_2_existent_vertices_32 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires {
                    ("expl:Internal"
                    (#"graph_c.jc" 298 12 751# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 145 11 20#
                     "expl:Requires clause"
                     (#"graph_c.jc" 298 12 751# "expl:Requires clause"
                     ((#"graph_c.jc" 298 12 751# "expl:Requires clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_16_alloc_table g_10)
                      (0)))
                     /\
                     (#"graph_c.jc" 298 12 751# "expl:Requires clause"
                     ((#"graph_c.jc" 298 12 751# "expl:Requires clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_16_alloc_table g_10)
                      (0)))
                     /\
                     (#"graph_c.jc" 298 12 751# "expl:Requires clause"
                     ((=) true true)))))))
                    /\
                    (#"graph_c.jc" 298 12 751# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 145 24 38#
                     "expl:Requires clause"
                     (graph_valid g_10
                     __anonstruct_Vertex_2_vertices_32_alloc_table
                     __anonstruct_Edge_3_edges_33_alloc_table
                     __anonstruct_Graph_4_esize_g_16
                     !__anonstruct_Graph_4_ecnt_g_16
                     __anonstruct_Graph_4_edges_g_16
                     __anonstruct_Graph_4_vsize_g_16
                     __anonstruct_Graph_4_vertices_g_16
                     !__anonstruct_Edge_3_existent_0_edges_33
                     !__anonstruct_Edge_3_to_edges_33
                     !__anonstruct_Edge_3_from_edges_33
                     __anonstruct_Vertex_2_existent_vertices_32))
                    /\
                    (#"graph_c.jc" 298 12 751# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 146 11 26#
                     "expl:Requires clause"
                     (is_vertex g_10 (Int32.to_int f_2)
                     __anonstruct_Graph_4_vsize_g_16))
                    /\
                    (#"graph_c.jc" 298 12 751# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 147 11 26#
                     "expl:Requires clause"
                     (is_vertex g_10 (Int32.to_int t_2)
                     __anonstruct_Graph_4_vsize_g_16))
                    /\
                    (#"graph_c.jc" 298 12 751# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 148 11 34#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_32
                     (shift (select __anonstruct_Graph_4_vertices_g_16 g_10)
                     (Int32.to_int f_2)))) (0))))
                    /\
                    (#"graph_c.jc" 298 12 751# "expl:Requires clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 149 11 34#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_32
                     (shift (select __anonstruct_Graph_4_vertices_g_16 g_10)
                     (Int32.to_int t_2)))) (0))))
                    /\
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 150 11 19#
                    "expl:Requires clause"
                    (not
                    (full g_10 __anonstruct_Graph_4_esize_g_16
                    __anonstruct_Graph_4_edges_g_16
                    !__anonstruct_Edge_3_existent_0_edges_33))))))))))))))))
                    }
                  reads { __anonstruct_Edge_3_existent_0_edges_33,
                  __anonstruct_Edge_3_from_edges_33,
                  __anonstruct_Edge_3_to_edges_33,
                  __anonstruct_Graph_4_ecnt_g_16 } writes {
                  __anonstruct_Edge_3_existent_0_edges_33,
                  __anonstruct_Edge_3_from_edges_33,
                  __anonstruct_Edge_3_to_edges_33,
                  __anonstruct_Graph_4_ecnt_g_16 }
                  ensures {
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
                    "expl:Ensures clause"
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
                    "expl:Ensures clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
                     "expl:Ensures clause"
                     (graph_valid g_10
                     __anonstruct_Vertex_2_vertices_32_alloc_table
                     __anonstruct_Edge_3_edges_33_alloc_table
                     __anonstruct_Graph_4_esize_g_16
                     !__anonstruct_Graph_4_ecnt_g_16
                     __anonstruct_Graph_4_edges_g_16
                     __anonstruct_Graph_4_vsize_g_16
                     __anonstruct_Graph_4_vertices_g_16
                     !__anonstruct_Edge_3_existent_0_edges_33
                     !__anonstruct_Edge_3_to_edges_33
                     !__anonstruct_Edge_3_from_edges_33
                     __anonstruct_Vertex_2_existent_vertices_32))
                    /\
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 151 10 24#
                    "expl:Ensures clause"
                    ((#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 152 10 59#
                     "expl:Ensures clause"
                     ((=)
                     (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_16
                     __anonstruct_Graph_4_edges_g_16
                     !__anonstruct_Edge_3_existent_0_edges_33
                     !__anonstruct_Edge_3_to_edges_33
                     !__anonstruct_Edge_3_from_edges_33)
                     (Int.(+)
                     (all_count g_10 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_16
                     __anonstruct_Graph_4_edges_g_16 (old
                     !__anonstruct_Edge_3_existent_0_edges_33) (old
                     !__anonstruct_Edge_3_to_edges_33) (old
                     !__anonstruct_Edge_3_from_edges_33)) (1))))
                    /\
                    (#"/home/vladimir/MSU/kornyhin/labs/task3/graph.c" 153 10 108#
                    "expl:Ensures clause"
                    (forall f2_11 : int.
                     (forall t2_11 : int.
                      (((not ((=) f2_11 (Int32.to_int f_2))) \/
                       (not ((=) t2_11 (Int32.to_int t_2)))) ->
                       ((=)
                       (all_count g_10 f2_11 t2_11
                       __anonstruct_Graph_4_esize_g_16
                       __anonstruct_Graph_4_edges_g_16
                       !__anonstruct_Edge_3_existent_0_edges_33
                       !__anonstruct_Edge_3_to_edges_33
                       !__anonstruct_Edge_3_from_edges_33)
                       (all_count g_10 f2_11 t2_11
                       __anonstruct_Graph_4_esize_g_16
                       __anonstruct_Graph_4_edges_g_16 (old
                       !__anonstruct_Edge_3_existent_0_edges_33) (old
                       !__anonstruct_Edge_3_to_edges_33) (old
                       !__anonstruct_Edge_3_from_edges_33)))))))))))) }
  
end
