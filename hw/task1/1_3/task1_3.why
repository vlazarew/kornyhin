theory Task1_3

use import int.Int

predicate p (x y1 y2 y3 :int) = (y1 = x * y2) /\ (y1 <= x * x * x) /\ (y3 <= x * x)
predicate precondition (x :int) = x >= 1

function evalFunc (x y1 y2 y3:int):int = ((x * x * x * x) - (y2 * y3))

goal s_a: forall x. precondition x -> p x x 1 x
goal a_t_a: forall x y1 y2 y3. precondition x /\ p x y1 y2 y3 /\ y2 < y3 -> p x (y1 + x) (y2 + 1) y3
goal a_f_t_a: forall x y1 y2 y3. precondition x /\ p x y1 y2 y3 /\ y2 >= y3 /\ y3 = x -> p x y1 y2 y1

goal correct: forall x y1 y2 y3. precondition x /\ p x y1 y2 y3 -> evalFunc x y1 y2 y3 >= 0
goal termination_1: forall x y1 y2 y3. precondition x /\ p x y1 y2 y3 /\ y2 < y3 -> evalFunc x (y1 + x) (y2 + 1) y3 < evalFunc x y1 y2 y3
goal termination_2: forall x y1 y2 y3. precondition x /\ p x y1 y2 y3 /\ y2 >= y3 /\ y3 = x -> evalFunc x y1 y2 y1 < evalFunc x y1 y2 y3

end
